//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Web.Mvc;
using System.ComponentModel.DataAnnotations;
using System.ServiceModel;
using Dwp.Adep.Ucb.ResourceLibrary;
using AutoMapper;
using UcbWeb.Helpers;
using UcbWeb.ViewModels;
using UcbWeb.Models;
using UcbWeb.UcbService;


namespace UcbWeb.Controllers
{
    public partial class SiteController : BaseController
    {

        private IUcbService UcbService;

        // Dependency Injection enabled constructors
        public SiteController()
            : this(new UcbServiceClient(), new SessionManager(), new CacheManager())
        {
        }

        public SiteController(IUcbService UcbService, ISessionManager sessionManager, ICacheManager cacheManager)
            : base(sessionManager, cacheManager)
        {
            this.UcbService = UcbService;
        }

        #region Edit

        // GET: /Site/Edit
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        public ActionResult Edit()
        {
            // Retrieve ID from session
            string organisationCode = sessionManager.IsExpected(sessionManager.OrganisationCode);

            SiteVM model = null;

            // Create service instance
            IUcbService sc = UcbService;

            try
            {
                // Call service to get Site item and any associated lookups via Organisation code
                SiteVMDC returnedObject = sc.GetSiteByOrganisationCode(CurrentUser, CurrentUser, appID, "", organisationCode);

                // Close service communication
                ((ICommunicationObject)sc).Close();

                //Get view model from service
                model = ConvertSiteDC(returnedObject);

                ResolveFieldCodesToFieldNamesUsingLists(model);

                // Store the service version
                sessionManager.SiteServiceVersion = model.SiteItem;

            }
            catch (Exception e)
            {
                // Handle the exception
                string message = ExceptionManager.HandleException(e, (ICommunicationObject)sc);
                model.Message = message;

                return View(model);
            }

            

            //Adds current retrieved Site to session
            sessionManager.CurrentSite = model.SiteItem;
            sessionManager.SiteNominatedManagersSearch = model.NominatedManagerSearchList;
            sessionManager.SiteDeputyNominatedManagersSearch = model.DeputyNominatedManagerSearchList;
            sessionManager.SiteDeputyNominatedManagers = model.DeputyNominatedManagerList;

            SetAccessContext(model);

            return View(model);
        }

        #endregion

        #region Create/Update

        // POST: /Site/Edit with Create button submitting
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult CreateSite(FormCollection collection)
        {
            return UpdateSite();
        }

        // POST: /Site/Edit with Save button submitting
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult SaveSite(FormCollection collection)
        {
            return UpdateSite();
        }

        //This method is shared between create and save
        private ActionResult UpdateSite()
        {
            // Get the updated model
            var model = GetUpdatedModel();

#if(debug)

            // Test to see if there are any errors
            var errors = ModelState
                    .Where(x => x.Value.Errors.Count > 0)
                    .Select(x => new { x.Key, x.Value.Errors[0].ErrorMessage })
                    .ToArray();
#endif

            //Set flags false
            SetFlagsFalse(model);

            // Test to see if the model has validated correctly
            if (ModelState.IsValid)
            {
                // Create service instance
                IUcbService sc = UcbService;

                //Attempt update
                try
                {
                    // Map model to data contract
                    SiteDC SiteItem = Mapper.Map<SiteDC>(model.SiteItem);
                    SiteVMDC SiteAggregate = new SiteVMDC();
                    
                    
                    SiteAggregate.SiteItem = SiteItem;
                    SiteAggregate.NominatedManagerCode = model.NominatedManagerCode;
                    SiteAggregate.DeputyNominatedManagerList = Mapper.Map<IEnumerable<StaffDC>>(model.DeputyNominatedManagerList).ToArray();

                    SiteVMDC returnedObject = null;

                    if (null == model.SiteItem.Code || model.SiteItem.Code == Guid.Empty)
                    {
                        // Call service to create new Site item
                        returnedObject = sc.CreateSite(CurrentUser, CurrentUser, appID, "", SiteAggregate);
                    }
                    else
                    {
                        // Call service to update Site item
                        returnedObject = sc.UpdateSite(CurrentUser, CurrentUser, appID, "", SiteAggregate);
                    }

                    // Close service communication
                    ((ICommunicationObject)sc).Close();

                    // Map data contract to model
                    model.SiteItem = Mapper.Map<SiteModel>(returnedObject.SiteItem);

                    //After creation some of the fields are display only so we need the resolved look up nmames
                    ResolveFieldCodesToFieldNamesUsingLists(model);

                    // Set access context to Edit mode
                    model.AccessContext = SiteAccessContext.Edit;

                    // Save version of item returned by service into session
                    sessionManager.SiteServiceVersion = model.SiteItem;
                    sessionManager.CurrentSite = model.SiteItem;
                    sessionManager.SiteNominatedManagersSearch = model.NominatedManagerSearchList;
                    sessionManager.SiteDeputyNominatedManagersSearch = model.DeputyNominatedManagerSearchList;
                    sessionManager.SiteDeputyNominatedManagers = model.DeputyNominatedManagerList;

                    // Remove the state from the model as these are being populated by the controller and the HTML helpers are being populated with
                    // the POSTED values and not the changed ones.
                    ModelState.Clear();
                    model.Message = Resources.MESSAGE_UPDATE_SUCCEEDED;
                }
                catch (Exception e)
                {
                    // Handle the exception
                    string message = ExceptionManager.HandleException(e, (ICommunicationObject)sc);
                    model.Message = message;

                    return View(model);
                }
            }

            return View(model);
        }

        #endregion

        #region Exit

        // POST: /Site/Edit with Exit button submitting
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult ExitSite(FormCollection collection)
        {
            var model = GetUpdatedModel();
            if (model.IsExitConfirmed == "True" || !model.IsViewDirty)
            {
                //Set flags false
                SetFlagsFalse(model);

                model.IsExitConfirmed = "False";

                //remove the current values from session
                sessionManager.CurrentSite = null;
                sessionManager.SiteServiceVersion = null;

                return RedirectToAction("SiteOrganisationSearch", "Organisation");

            }
            else
            {
                //Set flags false
                SetFlagsFalse(model);
                model.Message = Resources.MESSAGE_EXITCONFIRMATION;
                model.IsExitConfirmed = "True";
            }

            return View("SiteOrganisationSearch",model);
        }

        #endregion

        #region Delete

        // POST: /Site/Edit with Delete button submitting
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult DeleteSite(FormCollection collection)
        {
            var model = GetUpdatedModel();
            if (model.IsDeleteConfirmed == "True")
            {
                //Set flags false
                SetFlagsFalse(model);

                model.IsDeleteConfirmed = "False";

                // Create service instance
                IUcbService sc = UcbService;

                try
                {
                    // Call service to delete the item
                    sc.DeleteSite(CurrentUser, CurrentUser, appID, "", model.SiteItem.Code.ToString(), model.SiteItem.RowIdentifier.ToString());

                    // Close service communication
                    ((ICommunicationObject)sc).Close();

                    // Remove the current values from session
                    sessionManager.CurrentSite = null;
                    sessionManager.SiteServiceVersion = null;
                    sessionManager.SiteNominatedManagersSearch = new List<StaffModel>();
                    sessionManager.SiteDeputyNominatedManagersSearch = new List<StaffModel>();
                    sessionManager.SiteDeputyNominatedManagers = new List<StaffModel>();
                    
                    // Remove the state from the model as these are being populated by the controller and the HTML helpers are being populated with
                    // the POSTED values and not the changed ones.
                    ModelState.Clear();

                    // Create new item but keep any lists
                    model.SiteItem = new SiteModel() { IsActive = true };

                    // Set message to return to user
                    model.Message = Resources.MESSAGE_DELETE_SUCCEEDED;

                    // Set access context to Edit mode
                    model.AccessContext = SiteAccessContext.Create;

                    // Reset lists
                    model.NominatedManagerSearchList = new List<StaffModel>();
                    model.DeputyNominatedManagerSearchList = new List<StaffModel>();
                    model.DeputyNominatedManagerList = new List<StaffModel>();

                    // Redirect to the search screen
                    return View(model);
                }
                catch (Exception e)
                {
                    // Handle the exception
                    string message = ExceptionManager.HandleException(e, (ICommunicationObject)sc);
                    model.Message = message;

                    return View(model);
                }
            }
            else
            {
                //Set flags false
                SetFlagsFalse(model);
                model.Message = Resources.MESSAGE_DELETECONFIRMATION;
                model.IsDeleteConfirmed = "True";
            }

            return View(model);
        }

        #endregion

        #region New

        // POST: /Site/Edit with New button submitting
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamSearch(Prefix = "Search::")]
        [HttpPost]
        public ActionResult NewSite(FormCollection collection)
        {
            var model = GetUpdatedModel();
            //Set flags false
            SetFlagsFalse(model);

            //Clear Down Session
            sessionManager.SiteCode = null;
            sessionManager.CurrentSite = null;
            sessionManager.SiteServiceVersion = null;

            //Go to the Edit Screen
            return RedirectToAction("Edit", "Site");
        }

        #endregion

        #region Search

        // GET: /Site/Search
        //This is called when first entering search Site screen or when paging
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        public ActionResult Search(int page = 1)
        {
            // Create service instance
            IUcbService sc = UcbService;

            // Create model
            SiteSearchVM model = new SiteSearchVM();

            try
            {
                SiteSearchVMDC response = sc.SearchSite(CurrentUser, CurrentUser, appID, "", null, page, PageSize, true);

                // Close service communication
                ((ICommunicationObject)sc).Close();

                //Map response back to view model
                model.MatchList = Mapper.Map<IEnumerable<SiteSearchMatchDC>, List<SiteSearchMatchModel>>(response.MatchList);

                // Set paging values
                model.TotalRows = response.RecordCount;
                model.PageSize = sessionManager.PageSize;
                model.PageNumber = page;

                // Store the page number we were on
                sessionManager.SitePageNumber = model.PageNumber;

                return View(model);
            }
            catch (Exception e)
            {
                // Handle the exception
                string message = ExceptionManager.HandleException(e, (ICommunicationObject)sc);
                model.Message = message;

                return View(model);
            }

        }

        // POST: /Site/Search
        //This is called when clicking search button
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamSearch(Prefix = "Search::")]
        [HttpPost]
        public ActionResult SearchPost(SiteSearchVM model, int page = 1)
        {

            // Iterate through form keys
            foreach (string Key in Request.Form.Keys)
            {
                // Test if Select button was clicked...
                if (Key.StartsWith("Search::SearchPost_"))
                {
                    // Retrieve ID for entity which was selected
                    Guid Value = Guid.Parse(Key.Substring(19));

                    // Store ID for Edit screen
                    sessionManager.SiteCode = Value.ToString();

                    // Call out to Edit screen
                    return RedirectToAction("Edit", "Site", new { code = Value });

                }
            }

            // Return to the Screen
            return View(model);
        }

        #endregion

        #region SearchStaffNominatedManagers

        // POST: /Site/SearchStaffNominatedManagers
        //This is called when clicking search button
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult SearchStaffNominatedManagers()
        {
            // Get the updated model
            var model = GetUpdatedModel();

            // Clear model state to prevent validation
            ModelState.Clear();

            //Set flags false
            SetFlagsFalse(model);

            // Create service instance
            IUcbService sc = UcbService;

            try
            {
                StaffNominatedManagerSearchVMDC searchCritera = new StaffNominatedManagerSearchVMDC();
                searchCritera.FirstName = model.NominatedManagerFirstNameSearch;
                searchCritera.LastName = model.NominatedManagerLastNameSearch;
                searchCritera.IsDeputyNominatedManager = false;
                searchCritera.IsNominatedManager = true;

                StaffNominatedManagerSearchVMDC response = sc.SearchStaffNominatedManagers(CurrentUser, CurrentUser, appID, "", searchCritera);

                // Close service communication
                ((ICommunicationObject)sc).Close();

                //Map response back to view model
                model.NominatedManagerSearchList = Mapper.Map<List<StaffModel>>(response.MatchList);

                //Adds current retrieved Site to session
                sessionManager.CurrentSite = model.SiteItem;
                sessionManager.SiteNominatedManagersSearch = model.NominatedManagerSearchList;
                sessionManager.SiteDeputyNominatedManagersSearch = model.DeputyNominatedManagerSearchList;
                sessionManager.SiteDeputyNominatedManagers = model.DeputyNominatedManagerList;

                return View(model);
            }
            catch (Exception e)
            {
                // Handle the exception
                string message = ExceptionManager.HandleException(e, (ICommunicationObject)sc);
                model.Message = message;

                return View(model);
            }
        }

        // POST: /Site/SearchDeputyStaffNominatedManagers
        //This is called when clicking search button
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult SearchStaffDeputyNominatedManagers()
        {
            // Get the updated model
            var model = GetUpdatedModel();

            // Clear model state to prevent validation
            ModelState.Clear();

            //Set flags false
            SetFlagsFalse(model);

            // Create service instance
            IUcbService sc = UcbService;

            try
            {
                StaffNominatedManagerSearchVMDC searchCritera = new StaffNominatedManagerSearchVMDC();
                searchCritera.FirstName = model.DeputyNominatedManagerFirstNameSearch;
                searchCritera.LastName = model.DeputyNominatedManagerLastNameSearch;
                searchCritera.IsDeputyNominatedManager = true;
                searchCritera.IsNominatedManager = false;

                StaffNominatedManagerSearchVMDC response = sc.SearchStaffNominatedManagers(CurrentUser, CurrentUser, appID, "", searchCritera);

                // Close service communication
                ((ICommunicationObject)sc).Close();

                //Map response back to view model
                model.DeputyNominatedManagerSearchList = Mapper.Map<List<StaffModel>>(response.MatchList);

                //Adds current retrieved Site to session
                sessionManager.CurrentSite = model.SiteItem;
                sessionManager.SiteNominatedManagersSearch = model.NominatedManagerSearchList;
                sessionManager.SiteDeputyNominatedManagersSearch = model.DeputyNominatedManagerSearchList;
                sessionManager.SiteDeputyNominatedManagers = model.DeputyNominatedManagerList;

                return View(model);
            }
            catch (Exception e)
            {
                // Handle the exception
                string message = ExceptionManager.HandleException(e, (ICommunicationObject)sc);
                model.Message = message;

                return View(model);
            }
        }

        #endregion

        #region AddDeputyNominatedManager

        // POST: /Site/AddDeputyNominatedManager
        //This is called when clicking search button
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult AddDeputyNominatedManager()
        {
            // Get the updated model
            var model = GetUpdatedModel();

            // Clear model state to prevent validation
            ModelState.Clear();

            //Set flags false
            SetFlagsFalse(model);

            if(null != model.DeputyNominatedManagerCode && !model.DeputyNominatedManagerList.Any(x => model.DeputyNominatedManagerCode == x.Code.ToString()))
            {
                // Add manager selected
                model.DeputyNominatedManagerList.Add(model.DeputyNominatedManagerSearchList.Single(x => model.DeputyNominatedManagerCode == x.Code.ToString()));
            }

            //Adds current retrieved Site to session
            sessionManager.CurrentSite = model.SiteItem;
            sessionManager.SiteNominatedManagersSearch = model.NominatedManagerSearchList;
            sessionManager.SiteDeputyNominatedManagersSearch = model.DeputyNominatedManagerSearchList;
            sessionManager.SiteDeputyNominatedManagers = model.DeputyNominatedManagerList;

            return View(model);
        }

        #endregion

        #region

        // POST: /Site/RemoveDeputyNominatedManager
        //This is called when clicking search button
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult RemoveDeputyNominatedManager()
        {
            // Get the updated model
            var model = GetUpdatedModel();

            // Clear model state to prevent validation
            ModelState.Clear();

            //Set flags false
            SetFlagsFalse(model);

            Guid selectedForRemoval = Guid.Empty;

            // Iterate through form keys
            foreach (string Key in Request.Form.Keys)
            {
                // Test if Select button was clicked...
                if (Key.StartsWith("Edit::RemoveDeputyNominatedManager_"))
                {
                    // Retrieve ID for entity which was selected
                    selectedForRemoval = Guid.Parse(Key.Substring(35));
                }
            }

            if (null != selectedForRemoval && Guid.Empty != selectedForRemoval)
            {
                // Remove the item for the Remove button clicked
                model.DeputyNominatedManagerList.Remove(model.DeputyNominatedManagerList.Single(x => selectedForRemoval == x.Code));
            }

            //Adds current retrieved Site to session
            sessionManager.CurrentSite = model.SiteItem;
            sessionManager.SiteNominatedManagersSearch = model.NominatedManagerSearchList;
            sessionManager.SiteDeputyNominatedManagersSearch = model.DeputyNominatedManagerSearchList;
            sessionManager.SiteDeputyNominatedManagers = model.DeputyNominatedManagerList;

            // Return to the Screen
            return View(model);
        }

        #endregion

        #region Private methods

        private void SetFlagsFalse(SiteVM model)
        {
            model.IsDeleteConfirmed = "False";
            model.IsExitConfirmed = "False";
            model.IsNewConfirmed = "False";

            //Stop the binder resetting the posted values
            ModelState.Remove("IsDeleteConfirmed");
            ModelState.Remove("IsExitConfirmed");
            ModelState.Remove("IsNewConfirmed");
        }

        private void ResolveFieldCodesToFieldNamesUsingLists(SiteVM model)
        {
            //TODO:
        }

        /// <summary>
        /// Private method to merge in the model 
        /// </summary>
        /// <returns></returns>
        private SiteVM GetUpdatedModel()
        {
            SiteVM model = new SiteVM();
            RepopulateListsFromCacheSession(model);
            model.Message = "";

            if (sessionManager.CurrentSite != null)
            {
                model.SiteItem = sessionManager.CurrentSite;
            }

            //***************************************NEED WHITE LIST ---- BLACK LIST ------ TO PREVENT OVERPOSTING **************************
            bool result = TryUpdateModel(model);//This also validates and sets ModelState
            //*******************************************************************************************************************************
            if (sessionManager.CurrentSite != null)
            {
                //*****************************************PREVENT OVER POSTING ATTACKS******************************************************
                //Get the values for read only fields from session
                MergeNewValuesWithOriginal(model.SiteItem);
                //***************************************************************************************************************************
            }

            DetermineIsDirty(model);

            SetAccessContext(model);

            return model;
        }

        private SiteVM ConvertSiteDC(SiteVMDC returnedObject)
        {
            SiteVM model = new SiteVM();

            // Map Site Item
            model.SiteItem = Mapper.Map<SiteDC, SiteModel>(returnedObject.SiteItem);

            // Set Nominated Manager
            model.NominatedManagerCode = returnedObject.NominatedManagerCode;

            // Map lookup data lists
            if (null != returnedObject.NominatedManagerSearchList)
            {
                model.NominatedManagerSearchList = Mapper.Map<List<StaffModel>>(returnedObject.NominatedManagerSearchList);
            }
            else
            {
                model.NominatedManagerSearchList = new List<StaffModel>();
            }

            if (null != returnedObject.DeputyNominatedManagerList)
            {
                model.DeputyNominatedManagerList = Mapper.Map<List<StaffModel>>(returnedObject.DeputyNominatedManagerList);
            }
            else
            {
                model.DeputyNominatedManagerList = new List<StaffModel>();
            }

            if (null != returnedObject.DeputyNominatedManagerSearchList)
            {
                model.DeputyNominatedManagerSearchList = Mapper.Map<List<StaffModel>>(returnedObject.DeputyNominatedManagerSearchList);
            }
            else
            {
                model.DeputyNominatedManagerSearchList = new List<StaffModel>();
            }

            return model;
        }

        private void RepopulateListsFromCacheSession(SiteVM model)
        {
            // Populate cached lists if they are empty.
            model.NominatedManagerSearchList = sessionManager.SiteNominatedManagersSearch;
            model.DeputyNominatedManagerSearchList = sessionManager.SiteDeputyNominatedManagersSearch;
            model.DeputyNominatedManagerList = sessionManager.SiteDeputyNominatedManagers;
        }

        private void MergeNewValuesWithOriginal(SiteModel modelFromView)
        {
            //***************************The values that are display only will not be posted back so need to get them from session**************************

            SiteModel OriginalValuesFromSession = sessionManager.CurrentSite;

        }

        private void SetAccessContext(SiteVM model)
        {
            //Decide on access context
            if (null == model.SiteItem || model.SiteItem.Code == Guid.Empty)
            {
                // Create context
                model.AccessContext = SiteAccessContext.Create;
            }
            else
            {
                // Edit context
                model.AccessContext = SiteAccessContext.Edit;
            }
        }

        private void DetermineIsDirty(SiteVM model)
        {
            //Compare the Site to the original session
            if (model.SiteItem.PublicInstancePropertiesEqual(sessionManager.SiteServiceVersion, "RowIdentifier"))
            {
                model.IsViewDirty = false;
            }
            else
            {
                model.IsViewDirty = true;
            }

        }
        #endregion

    }
}
