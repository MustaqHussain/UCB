//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Web.Mvc;
using System.ComponentModel.DataAnnotations;
using System.ServiceModel;
using Dwp.Adep.Ucb.ResourceLibrary;
using AutoMapper;
using UcbWeb.Helpers;
using UcbWeb.ViewModels;
using UcbWeb.Models;
using UcbWeb.UcbService;


namespace UcbWeb.Controllers
{
    public partial class OrganisationController : BaseController
    {

        private IUcbService UcbService;

        // Dependency Injection enabled constructors
        public OrganisationController()
            : this(new UcbServiceClient(), new SessionManager(), new CacheManager())
        {
        }

        public OrganisationController(IUcbService UcbService, ISessionManager sessionManager, ICacheManager cacheManager)
            : base(sessionManager, cacheManager)
        {
            this.UcbService = UcbService;
        }

        #region Edit

        // GET: /Organisation/Edit
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        public ActionResult Edit()
        {
            // Retrieve ID from session
            string code = sessionManager.OrganisationCode;

            OrganisationVM model = new OrganisationVM();

            // Not from staff or error
            if (String.IsNullOrEmpty(code))
            {
                //If session has lists then use them
                RepopulateListsFromCacheSession(model);

                //Assume we are in create mode as no code passed
                model.OrganisationItem = new OrganisationModel() { IsActive = true };
            }
            //if we have been passed a code then assume we are in edit situation and we need to retrieve from the database.
            else
            {
                // Create service instance
                IUcbService sc = UcbService;

                try
                {
                    // Call service to get Organisation item and any associated lookups    
                    OrganisationVMDC returnedObject = sc.GetOrganisation(CurrentUser, CurrentUser, appID, "", code);

                    // Close service communication
                    ((ICommunicationObject)sc).Close();

                    //Get view model from service
                    model = ConvertOrganisationDC(returnedObject);

                    ResolveFieldCodesToFieldNamesUsingLists(model);

                    //Store the service version
                    sessionManager.OrganisationServiceVersion = model.OrganisationItem;
                }
                catch (Exception e)
                {
                    // Handle the exception
                    string message = ExceptionManager.HandleException(e, (ICommunicationObject)sc);
                    model.Message = message;

                    return View(model);
                }
            }

            //Adds current retrieved Organisation to session
            sessionManager.CurrentOrganisation = model.OrganisationItem;
            SetAccessContext(model);

            return View(model);
        }

        #endregion

        #region Create/Update

        // POST: /Organisation/Edit with Create button submitting
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult CreateOrganisation(FormCollection collection)
        {
            return UpdateOrganisation();
        }

        // POST: /Organisation/Edit with Save button submitting
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult SaveOrganisation(FormCollection collection)
        {
            return UpdateOrganisation();
        }

        //This method is shared between create and save
        private ActionResult UpdateOrganisation()
        {
            // Get the updated model
            var model = GetUpdatedModel();

            // Test to see if there are any errors
            var errors = ModelState
                    .Where(x => x.Value.Errors.Count > 0)
                    .Select(x => new { x.Key, x.Value.Errors[0].ErrorMessage })
                    .ToArray();

            //Set flags false
            SetFlagsFalse(model);

            // Test to see if the model has validated correctly
            if (ModelState.IsValid)
            {
                // Create service instance
                IUcbService sc = UcbService;

                //Attempt update
                try
                {
                    // Map model to data contract
                    OrganisationDC OrganisationItem = Mapper.Map<OrganisationDC>(model.OrganisationItem);

                    OrganisationVMDC returnedObject = null;

                    if (null == model.OrganisationItem.Code || model.OrganisationItem.Code == Guid.Empty)
                    {
                        // Call service to create new Organisation item
                        returnedObject = sc.CreateOrganisation(CurrentUser, CurrentUser, appID, "", OrganisationItem);
                    }
                    else
                    {
                        // Call service to update Organisation item
                        returnedObject = sc.UpdateOrganisation(CurrentUser, CurrentUser, appID, "", OrganisationItem);
                    }

                    // Close service communication
                    ((ICommunicationObject)sc).Close();

                    // Retrieve item returned by service
                    var createdOrganisation = returnedObject.OrganisationItem;

                    // Map data contract to model
                    model.OrganisationItem = Mapper.Map<OrganisationModel>(createdOrganisation);

                    //After creation some of the fields are display only so we need the resolved look up nmames
                    ResolveFieldCodesToFieldNamesUsingLists(model);

                    // Set access context to Edit mode
                    model.AccessContext = OrganisationAccessContext.Edit;

                    // Save version of item returned by service into session
                    sessionManager.OrganisationServiceVersion = model.OrganisationItem;
                    sessionManager.CurrentOrganisation = model.OrganisationItem;

                    // Remove the state from the model as these are being populated by the controller and the HTML helpers are being populated with
                    // the POSTED values and not the changed ones.
                    ModelState.Clear();
                    model.Message = Resources.MESSAGE_UPDATE_SUCCEEDED;
                }
                catch (Exception e)
                {
                    // Handle the exception
                    string message = ExceptionManager.HandleException(e, (ICommunicationObject)sc);
                    model.Message = message;

                    return View(model);
                }
            }

            return View(model);
        }

        #endregion

        #region Exit

        // POST: /Organisation/Edit with Exit button submitting
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult ExitOrganisation(FormCollection collection)
        {
            var model = GetUpdatedModel();
            if (model.IsExitConfirmed == "True" || !model.IsViewDirty)
            {
                //Set flags false
                SetFlagsFalse(model);

                model.IsExitConfirmed = "False";

                //remove the current values from session
                sessionManager.CurrentOrganisation = null;
                sessionManager.OrganisationServiceVersion = null;

                return RedirectToAction("Search", "Organisation");

            }
            else
            {
                //Set flags false
                SetFlagsFalse(model);
                model.Message = Resources.MESSAGE_EXITCONFIRMATION;
                model.IsExitConfirmed = "True";
            }

            return View(model);
        }

        #endregion

        #region Delete

        // POST: /Organisation/Edit with Delete button submitting
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult DeleteOrganisation(FormCollection collection)
        {
            var model = GetUpdatedModel();
            if (model.IsDeleteConfirmed == "True")
            {
                //Set flags false
                SetFlagsFalse(model);

                model.IsDeleteConfirmed = "False";

                // Create service instance
                IUcbService sc = UcbService;

                try
                {
                    // Call service to delete the item
                    sc.DeleteOrganisation(CurrentUser, CurrentUser, appID, "", model.OrganisationItem.Code.ToString(), model.OrganisationItem.RowIdentifier.ToString());

                    // Close service communication
                    ((ICommunicationObject)sc).Close();

                    // Remove the current values from session
                    sessionManager.CurrentOrganisation = null;
                    sessionManager.OrganisationServiceVersion = null;

                    // Remove the state from the model as these are being populated by the controller and the HTML helpers are being populated with
                    // the POSTED values and not the changed ones.
                    ModelState.Clear();

                    // Create new item but keep any lists
                    model.OrganisationItem = new OrganisationModel() { IsActive = true };

                    // Set message to return to user
                    model.Message = Resources.MESSAGE_DELETE_SUCCEEDED;

                    // Set access context to Edit mode
                    model.AccessContext = OrganisationAccessContext.Create;

                    // Redirect to the search screen
                    return View(model);
                }
                catch (Exception e)
                {
                    // Handle the exception
                    string message = ExceptionManager.HandleException(e, (ICommunicationObject)sc);
                    model.Message = message;

                    return View(model);
                }
            }
            else
            {
                //Set flags false
                SetFlagsFalse(model);
                model.Message = Resources.MESSAGE_DELETECONFIRMATION;
                model.IsDeleteConfirmed = "True";
            }

            return View(model);
        }

        #endregion

        #region New

        // POST: /Organisation/Edit with New button submitting
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamSearch(Prefix = "Search::")]
        [HttpPost]
        public ActionResult NewOrganisation(FormCollection collection)
        {
            var model = GetUpdatedModel();
            //Set flags false
            SetFlagsFalse(model);

            //Clear Down Session
            sessionManager.OrganisationCode = null;
            sessionManager.CurrentOrganisation = null;
            sessionManager.OrganisationServiceVersion = null;

            //Go to the Edit Screen
            return RedirectToAction("Edit", "Organisation");
        }

        #endregion

        #region Search

        // GET: /Organisation/Search
        //This is called when first entering search Organisation screen or when paging
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        public ActionResult Search(int page = 1)
        {
            // Create service instance
            IUcbService sc = UcbService;

            // Create model
            OrganisationSearchVM model = new OrganisationSearchVM();

            try
            {
                OrganisationSearchVMDC response = sc.SearchOrganisation(CurrentUser, CurrentUser, appID, "", null, page, PageSize, true);

                // Close service communication
                ((ICommunicationObject)sc).Close();

                //Map response back to view model
                model.MatchList = Mapper.Map<IEnumerable<OrganisationSearchMatchDC>, List<OrganisationSearchMatchModel>>(response.MatchList);

                // Set paging values
                model.TotalRows = response.RecordCount;
                model.PageSize = sessionManager.PageSize;
                model.PageNumber = page;

                // Store the page number we were on
                sessionManager.OrganisationPageNumber = model.PageNumber;

                return View(model);
            }
            catch (Exception e)
            {
                // Handle the exception
                string message = ExceptionManager.HandleException(e, (ICommunicationObject)sc);
                model.Message = message;

                return View(model);
            }

        }

        // POST: /Organisation/Search
        //This is called when clicking search button
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamSearch(Prefix = "Search::")]
        [HttpPost]
        public ActionResult SearchPost(OrganisationSearchVM model, int page = 1)
        {

            // Iterate through form keys
            foreach (string Key in Request.Form.Keys)
            {
                // Test if Select button was clicked...
                if (Key.StartsWith("Search::SearchPost_"))
                {
                    // Retrieve ID for entity which was selected
                    Guid Value = Guid.Parse(Key.Substring(19));

                    // Store ID for Edit screen
                    sessionManager.OrganisationCode = Value.ToString();

                    // Call out to Edit screen
                    return RedirectToAction("Edit", "Organisation", new { code = Value });

                }
            }

            // Return to the Screen
            return View(model);
        }

        #endregion

        #region SiteOrganisationSearch

        // GET: /Organisation/SiteOrganisationSearch
        //This is called when first entering SiteOrganisationSearch screen or when paging
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        public ActionResult SiteOrganisationSearch(int page = 1)
        {
            //Create model
            OrganisationSearchVM model = new OrganisationSearchVM();

            //Repopulate search criteria if already entered
            if (null == model.SearchCriteria && sessionManager.OrganisationSearchCriteria != null)
            {
                model.SearchCriteria = sessionManager.OrganisationSearchCriteria;
            }
            else
            {
                // Add criteria to search only on Organisation Type  of Site
                model.SearchCriteria = new OrganisationSearchCriteriaModel();
                model.SearchCriteria.OrganisationType = "Site";
            }

            // Create service instance
            IUcbService sc = UcbService;

            try
            {
                // Convert search criteria to data contract
                OrganisationSearchCriteriaDC organisationSearch = Mapper.Map<OrganisationSearchCriteriaDC>(model.SearchCriteria);
                 
                // Call service
                OrganisationSearchVMDC response = sc.SearchOrganisation(CurrentUser, CurrentUser, appID, "", organisationSearch, page, PageSize, true);

                // Close service communication
                ((ICommunicationObject)sc).Close();

                //Map response back to view model
                model.MatchList = Mapper.Map<IEnumerable<OrganisationSearchMatchDC>, List<OrganisationSearchMatchModel>>(response.MatchList);

                // Set paging values
                model.TotalRows = response.RecordCount;
                model.PageSize = sessionManager.PageSize;
                model.PageNumber = page;

                // Store the page number we were on
                sessionManager.OrganisationPageNumber = model.PageNumber;

                return View(model);
            }
            catch (Exception e)
            {
                // Handle the exception
                string message = ExceptionManager.HandleException(e, (ICommunicationObject)sc);
                model.Message = message;

                return View(model);
            }

        }

        // POST: /Organisation/SiteOrganisationSearch
        //This is called when clicking search button
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamSiteOrganisationSearch(Prefix = "Search::")]
        [HttpPost]
        public ActionResult SiteOrganisationSearchCriteriaPost(OrganisationSearchVM model, int page = 1)
        {
            // Add Organisation Type search to ensure we only search within Site
            model.SearchCriteria.OrganisationType = "Site";

            // Create service instance
            IUcbService sc = UcbService;

            try
            {
                // Convert search criteria to data contract
                OrganisationSearchCriteriaDC organisationSearch = Mapper.Map<OrganisationSearchCriteriaDC>(model.SearchCriteria);

                // Call service
                OrganisationSearchVMDC response = sc.SearchOrganisation(CurrentUser, CurrentUser, appID, "", organisationSearch, page, PageSize, true);

                // Close service communication
                ((ICommunicationObject)sc).Close();

                //Map response back to view model
                model.MatchList = Mapper.Map<IEnumerable<OrganisationSearchMatchDC>, List<OrganisationSearchMatchModel>>(response.MatchList);

                // Set paging values
                model.TotalRows = response.RecordCount;
                model.PageSize = sessionManager.PageSize;
                model.PageNumber = page;

                // Store the page number we were on
                sessionManager.OrganisationPageNumber = model.PageNumber;
                sessionManager.OrganisationSearchCriteria = model.SearchCriteria;

                return View("SiteOrganisationSearch", model);
            }
            catch (Exception e)
            {
                // Handle the exception
                string message = ExceptionManager.HandleException(e, (ICommunicationObject)sc);
                model.Message = message;

                return View("SiteOrganisationSearch", model);
            }
        }

        // POST: /Organisation/SiteOrganisationSearch
        //This is called when clicking search button
        [CustomAuthorize(Roles = AppRoles.ADMIN)]
        [HttpParamSiteOrganisationSearch(Prefix = "Search::")]
        [HttpPost]
        public ActionResult SiteOrganisationSearchPost(OrganisationSearchVM model, int page = 1)
        {

            // Iterate through form keys
            foreach (string Key in Request.Form.Keys)
            {
                // Test if Select button was clicked...
                if (Key.StartsWith("Search::SiteOrganisationSearchPost_"))
                {
                    // Retrieve ID for entity which was selected
                    Guid Value = Guid.Parse(Key.Substring(35));

                    // Store ID for Edit screen
                    sessionManager.OrganisationCode = Value.ToString();

                    // Call out to Edit screen
                    return RedirectToAction("Edit", "Site", new { code = Value });

                }
            }

            // Return to the Screen
            return View(model);
        }

        #endregion

        #region Private methods

        private void SetFlagsFalse(OrganisationVM model)
        {
            model.IsDeleteConfirmed = "False";
            model.IsExitConfirmed = "False";
            model.IsNewConfirmed = "False";

            //Stop the binder resetting the posted values
            ModelState.Remove("IsDeleteConfirmed");
            ModelState.Remove("IsExitConfirmed");
            ModelState.Remove("IsNewConfirmed");
        }

        private void ResolveFieldCodesToFieldNamesUsingLists(OrganisationVM model)
        {
            //TODO:
        }

        /// <summary>
        /// Private method to merge in the model 
        /// </summary>
        /// <returns></returns>
        private OrganisationVM GetUpdatedModel()
        {
            OrganisationVM model = new OrganisationVM();
            RepopulateListsFromCacheSession(model);
            model.Message = "";

            if (sessionManager.CurrentOrganisation != null)
            {
                model.OrganisationItem = sessionManager.CurrentOrganisation;
            }

            //***************************************NEED WHITE LIST ---- BLACK LIST ------ TO PREVENT OVERPOSTING **************************
            bool result = TryUpdateModel(model);//This also validates and sets ModelState
            //*******************************************************************************************************************************
            if (sessionManager.CurrentOrganisation != null)
            {
                //*****************************************PREVENT OVER POSTING ATTACKS******************************************************
                //Get the values for read only fields from session
                MergeNewValuesWithOriginal(model.OrganisationItem);
                //***************************************************************************************************************************
            }

            SetAccessContext(model);

            return model;
        }

        private OrganisationVM ConvertOrganisationDC(OrganisationVMDC returnedObject)
        {
            OrganisationVM model = new OrganisationVM();

            // Map Organisation Item
            model.OrganisationItem = Mapper.Map<OrganisationDC, OrganisationModel>(returnedObject.OrganisationItem);

            // Map lookup data lists
            model.OrganisationTypeList = Mapper.Map<IEnumerable<OrganisationTypeDC>, List<OrganisationTypeModel>>(returnedObject.OrganisationTypeList);

            return model;
        }

        private void RepopulateListsFromCacheSession(OrganisationVM model)
        {
            // Populate cached lists if they are empty. Will invoke service call
            OrganisationLookupListsCacheObject CachedLists = cacheManager.OrganisationListCache;

            // Retrieve any cached lists to model
            model.OrganisationTypeList = CachedLists.OrganisationTypeList;

        }

        private void MergeNewValuesWithOriginal(OrganisationModel modelFromView)
        {
            //***************************The values that are display only will not be posted back so need to get them from session**************************

            OrganisationModel OriginalValuesFromSession = sessionManager.CurrentOrganisation;

        }

        private void SetAccessContext(OrganisationVM model)
        {
            //Decide on access context
            if (null == model.OrganisationItem || model.OrganisationItem.Code == Guid.Empty)
            {
                // Create context
                model.AccessContext = OrganisationAccessContext.Create;
            }
            else
            {
                // Edit context
                model.AccessContext = OrganisationAccessContext.Edit;
            }
        }

        private void DetermineIsDirty(OrganisationVM model)
        {
            //Compare the Organisation to the original session
            if (model.OrganisationItem.PublicInstancePropertiesEqual(sessionManager.OrganisationServiceVersion, "RowIdentifier"))
            {
                model.IsViewDirty = false;
            }
            else
            {
                model.IsViewDirty = true;
            }

        }
        #endregion

    }
}
