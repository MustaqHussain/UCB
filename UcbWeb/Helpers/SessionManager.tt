<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="..\..\Dwp.Adep.Ucb.DataServices\Models\Global.t4"#><#@
 output extension=".cs"#><#

// List of entities not to generate code for
string ignoreList = globalIgnoreList + ",Audit,";

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\..\Dwp.Adep.Ucb.DataServices\Models\Model1.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Write out support code to primary template output file
WriteHeader(fileManager, "UcbWeb.Models");

fileManager.StartNewFile("SessionManager.Generated.cs");
BeginNamespace(namespaceName, code);

#>
public partial class SessionManager 
{

<#

// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	// Do not generate code for entities in the ignore list
	if (ignoreList.Contains("," + entity.Name + ",")) continue;
#>

	public int <#=entity.Name#>PageNumber
    {
		get { return GetFromSession<int>(<#=entity.Name#>PageNumberKey); }
        set { SetInSession(<#=entity.Name#>PageNumberKey, value); }
    }

    private const string <#=entity.Name#>PageNumberKey = "<#=entity.Name.ToUpper()#>PAGENUMBER";
	
	public string <#=entity.Name#>Code
    {
		get { return GetFromSession<string>(<#=entity.Name#>CodeKey); }
        set { SetInSession(<#=entity.Name#>CodeKey, value); }
    }

    private const string <#=entity.Name#>CodeKey = "<#=entity.Name.ToUpper()#>CODE";

	public <#=entity.Name#>Model Current<#=entity.Name#>
    {
		get { return GetFromSession<<#=entity.Name#>Model>(Current<#=entity.Name#>Key); }
        set { SetInSession(Current<#=entity.Name#>Key, value); }
    }

    private const string Current<#=entity.Name#>Key = "CURRENT<#=entity.Name.ToUpper()#>";

	public <#=entity.Name#>Model <#=entity.Name#>ServiceVersion
    {
		get { return GetFromSession<<#=entity.Name#>Model>(<#=entity.Name#>ServiceVersionKey); }
        set { SetInSession(<#=entity.Name#>ServiceVersionKey, value); }
    }

    private const string <#=entity.Name#>ServiceVersionKey = "<#=entity.Name.ToUpper()#>SERVICEVERSION";
<#
}
#>
}
<#
    EndNamespace(namespaceName);



// Write out support code to primary template output file
WriteHeader(fileManager, "UcbWeb.Models");

fileManager.StartNewFile("ISessionManager.Generated.cs");
BeginNamespace(namespaceName, code);

#>
public partial interface ISessionManager 
{

<#

// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	// Do not generate code for entities in the ignore list
	if (ignoreList.Contains("," + entity.Name + ",")) continue;
#>
	int <#=entity.Name#>PageNumber {get; set;}
	string <#=entity.Name#>Code {get; set;}
	<#=entity.Name#>Model Current<#=entity.Name#> {get; set;}
	<#=entity.Name#>Model <#=entity.Name#>ServiceVersion {get; set;}

<#
}
#>
}
<#
    EndNamespace(namespaceName);
if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

void WriteCustomObservableCollection()
{
#>
// An System.Collections.ObjectModel.ObservableCollection that raises
// individual item removal notifications on clear and prevents adding duplicates.
public class FixupCollection<T> : ObservableCollection<T>
{
    protected override void ClearItems()
    {
        new List<T>(this).ForEach(t => Remove(t));
    }

    protected override void InsertItem(int index, T item)
    {
        if (!this.Contains(item))
        {
            base.InsertItem(index, item);
        }
    }
}
<#+
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;
}
#>
