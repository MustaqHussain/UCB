<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="..\..\Dwp.Adep.Ucb.DataServices\Models\Global.t4"#><#@
 output extension=".cs"#><#

// List of entities not to generate code for
string ignoreList = globalIgnoreList + ",Incident,Audit,Site,";

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\..\Dwp.Adep.Ucb.DataServices\Models\Model1.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Write out support code to primary template output file
WriteHeader(fileManager, "System.Web", "AutoMapper", "UcbWeb.UcbService", "UcbWeb.Models");

fileManager.StartNewFile("CacheManager.Generated.cs");
BeginNamespace(namespaceName, code);

#>
// Manages items which need to be placed in Web cache
public partial class CacheManager 
{
<#
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	// Do not generate code for entities in the ignore list
	if (ignoreList.Contains("," + entity.Name + ",")) continue;
#>

	private const string <#=entity.Name#>ListsKey = "<#=entity.Name.ToUpper()#>LISTS";

	public <#=entity.Name#>LookupListsCacheObject <#=entity.Name#>ListCache
	{
	    get { return Get<<#=entity.Name#>LookupListsCacheObject>(<#=entity.Name#>ListsKey, Get<#=entity.Name#>AndLookups); }
	}
 
	private <#=entity.Name#>LookupListsCacheObject Get<#=entity.Name#>AndLookups()
	{
	            
		UcbServiceClient sc = new UcbServiceClient();
		<#=entity.Name#>VMDC returnObject = sc.Get<#=entity.Name#>(HttpContext.Current.User.Identity.Name, HttpContext.Current.User.Identity.Name, "FrameworkAdmin", "", null);

	    <#=entity.Name#>LookupListsCacheObject CachedLists = new <#=entity.Name#>LookupListsCacheObject();
		
<#
			foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
			{
				if (edmProperty.Name == "SecurityLabel") continue;

				foreach (NavigationProperty nav in entity.NavigationProperties.Where(np=>np.GetDependentProperties().Contains(edmProperty)))
				{
#>
		CachedLists.<#=edmProperty.Name.Replace("Code", "")#>List = Mapper.Map<IEnumerable<<#=nav.ToEndMember#>DC>, List<<#=nav.ToEndMember#>Model>>(returnObject.<#=edmProperty.Name.Replace("Code", "")#>List);
<#
				}
			}
#>
    	return CachedLists;           
	}
<#
}
#>
}

<#
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
// Do not generate code for entities in the ignore list
	if (ignoreList.Contains("," + entity.Name + ",")) continue;
#>
// Manages cached lookup lists for <#=entity.Name#>
public class <#=entity.Name#>LookupListsCacheObject
{
<#
			foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
			{
				if (edmProperty.Name == "SecurityLabel") continue;

				foreach (NavigationProperty nav in entity.NavigationProperties.Where(np=>np.GetDependentProperties().Contains(edmProperty)))
				{
#>
	public List<<#=nav.ToEndMember#>Model> <#=edmProperty.Name.Replace("Code", "")#>List { get; set; }
<#
				}
			}
#> 
}
	
<#
}

EndNamespace(namespaceName);





// Write out support code to primary template output file
WriteHeader(fileManager, "System.Web", "AutoMapper", "UcbWeb.UcbService", "UcbWeb.Models");

fileManager.StartNewFile("ICacheManager.Generated.cs");
BeginNamespace(namespaceName, code);

#>
// Manages items which need to be placed in Web cache
public partial interface ICacheManager 
{
<#
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	// Do not generate code for entities in the ignore list
	if (ignoreList.Contains("," + entity.Name + ",")) continue;
#>
	<#=entity.Name#>LookupListsCacheObject <#=entity.Name#>ListCache { get; }
<#
}
#>
}
<#

EndNamespace(namespaceName);

if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

void WriteCustomObservableCollection()
{
#>
// An System.Collections.ObjectModel.ObservableCollection that raises
// individual item removal notifications on clear and prevents adding duplicates.
public class FixupCollection<T> : ObservableCollection<T>
{
    protected override void ClearItems()
    {
        new List<T>(this).ForEach(t => Remove(t));
    }

    protected override void InsertItem(int index, T item)
    {
        if (!this.Contains(item))
        {
            base.InsertItem(index, item);
        }
    }
}
<#+
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;
}
#>
