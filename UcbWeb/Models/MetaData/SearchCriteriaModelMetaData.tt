<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="..\..\..\Dwp.Adep.Ucb.DataServices\Models\Global.t4"#><#@ 
 output extension=".cs"#><#

// List of entities not to generate code for
string ignoreList = globalIgnoreList + ",Staff,Audit,";

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\..\..\Dwp.Adep.Ucb.DataServices\Models\Model1.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion().Replace(".MetaData", string.Empty);

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Write out support code to primary template output file
WriteHeader(fileManager, "System.ComponentModel.DataAnnotations", "Dwp.Adep.Ucb.ResourceLibrary");

// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	
	continue;
	
	// Do not generate code for entities in the ignore list
	if (ignoreList.Contains("," + entity.Name + ",")) continue;

	fileManager.StartNewFile(entity.Name + "SearchCriteriaModel.metadata.cs");
	BeginNamespace(namespaceName, code);

#>
[MetadataTypeAttribute(typeof(<#=code.Escape(entity)#>SearchCriteriaModel.<#=code.Escape(entity)#>SearchCriteriaModelMetadata))]
<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#>SearchCriteriaModel<#=code.StringBefore(" : ", code.Escape(entity.BaseType))#>
{
	<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#>SearchCriteriaModel<#=code.StringBefore(" : ", code.Escape(entity.BaseType))#>Metadata
	{
<#
		foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
		{
			bool isForeignKey = entity.NavigationProperties.Any(np=>np.GetDependentProperties().Contains(edmProperty));
			bool isDefaultValueDefinedInModel = (edmProperty.DefaultValue != null);
			if (edmProperty.Name == "Code" || edmProperty.Name == "RowIdentifier" || edmProperty.Name == "IsActive" || edmProperty.Name == "SecurityLabel") continue;
#>
<#if (ef.IsKey(edmProperty)){#><#=code.Escape("		[Key]")#>
<#}#>
<#if (code.Escape(edmProperty.TypeUsage)=="Nullable<System.DateTime>"){#><#=code.Escape("		[DataType(DataType.Date)]")#>
<#}#>
<#if (!IsNullable(edmProperty.TypeUsage)){#><#=code.Escape("		 [Required(ErrorMessageResourceName = \"VAL_REQUIRED\", ErrorMessageResourceType = typeof(Resources))]")#>
<#}#>
<#if (HasMaxLength(edmProperty.TypeUsage) && edmProperty.TypeUsage.ToString() != "Edm.Binary")
{
	if (MaxLength(edmProperty.TypeUsage) != "Max") {#>		[StringLength(<#=MaxLength(edmProperty.TypeUsage)#>)]
<#}
}
#>
		[Display(Name="LABEL_<#=entity.Name.ToUpper()#>_<#=edmProperty.Name.ToUpper()#>", ResourceType=typeof(Resources))]
		public <#=code.Escape(edmProperty.TypeUsage)#> <#=code.Escape(edmProperty)#> {get; set;}

  <#}#>
  }
}
<#

	EndNamespace(namespaceName);
}
fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager thisFileManager, params string[] extraUsings)
{
    thisFileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    thisFileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

void WriteCustomObservableCollection()
{
#>
// An System.Collections.ObjectModel.ObservableCollection that raises
// individual item removal notifications on clear and prevents adding duplicates.
public class FixupCollection<T> : ObservableCollection<T>
{
    protected override void ClearItems()
    {
        new List<T>(this).ForEach(t => Remove(t));
    }

    protected override void InsertItem(int index, T item)
    {
        if (!this.Contains(item))
        {
            base.InsertItem(index, item);
        }
    }
}
<#+
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;

}

private bool IsNullable(TypeUsage usage)
{
	return (bool)usage.Facets.First(facet => facet.Name == "Nullable").Value;
}

private bool HasMaxLength(TypeUsage usage)
{
	return usage.Facets.Any(facet => facet.Name == "MaxLength");
}

private string MaxLength(TypeUsage usage)
{
	return (string)usage.Facets.First(facet => facet.Name == "MaxLength").Value.ToString();
}

#>