//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace Dwp.Adep.Ucb.DataServices.Models
{
    public partial class Application : IAuditable, IActiveAware 
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
    
        public virtual System.Guid SecurityLabel
        {
            get { return _securityLabel; }
            set
            {
                if (_securityLabel != value)
                {
                    if (Organisation != null && Organisation.Code != value)
                    {
                        Organisation = null;
                    }
                    _securityLabel = value;
                }
            }
        }
        private System.Guid _securityLabel;
    
        public virtual string ApplicationName
        {
            get;
            set;
        }
    
        public virtual string Location
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual bool IsActive
        {
            get;
            set;
        }
    
        public virtual bool IsSpecificOrganisationAccessRequired
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<ApplicationAttribute> ApplicationAttribute
        {
            get
            {
                if (_applicationAttribute == null)
                {
                    var newCollection = new FixupCollection<ApplicationAttribute>();
                    newCollection.CollectionChanged += FixupApplicationAttribute;
                    _applicationAttribute = newCollection;
                }
                return _applicationAttribute;
            }
            set
            {
                if (!ReferenceEquals(_applicationAttribute, value))
                {
                    var previousValue = _applicationAttribute as FixupCollection<ApplicationAttribute>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupApplicationAttribute;
                    }
                    _applicationAttribute = value;
                    var newValue = value as FixupCollection<ApplicationAttribute>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupApplicationAttribute;
                    }
                }
            }
        }
        private ICollection<ApplicationAttribute> _applicationAttribute;
    
        public virtual ICollection<ApplicationOrganisationTypeGroup> ApplicationOrganisationTypeGroup
        {
            get
            {
                if (_applicationOrganisationTypeGroup == null)
                {
                    var newCollection = new FixupCollection<ApplicationOrganisationTypeGroup>();
                    newCollection.CollectionChanged += FixupApplicationOrganisationTypeGroup;
                    _applicationOrganisationTypeGroup = newCollection;
                }
                return _applicationOrganisationTypeGroup;
            }
            set
            {
                if (!ReferenceEquals(_applicationOrganisationTypeGroup, value))
                {
                    var previousValue = _applicationOrganisationTypeGroup as FixupCollection<ApplicationOrganisationTypeGroup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupApplicationOrganisationTypeGroup;
                    }
                    _applicationOrganisationTypeGroup = value;
                    var newValue = value as FixupCollection<ApplicationOrganisationTypeGroup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupApplicationOrganisationTypeGroup;
                    }
                }
            }
        }
        private ICollection<ApplicationOrganisationTypeGroup> _applicationOrganisationTypeGroup;
    
        public virtual ICollection<StaffAttributes> StaffAttributes
        {
            get
            {
                if (_staffAttributes == null)
                {
                    var newCollection = new FixupCollection<StaffAttributes>();
                    newCollection.CollectionChanged += FixupStaffAttributes;
                    _staffAttributes = newCollection;
                }
                return _staffAttributes;
            }
            set
            {
                if (!ReferenceEquals(_staffAttributes, value))
                {
                    var previousValue = _staffAttributes as FixupCollection<StaffAttributes>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStaffAttributes;
                    }
                    _staffAttributes = value;
                    var newValue = value as FixupCollection<StaffAttributes>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStaffAttributes;
                    }
                }
            }
        }
        private ICollection<StaffAttributes> _staffAttributes;
    
        public virtual ICollection<StaffOrganisation> StaffOrganisation
        {
            get
            {
                if (_staffOrganisation == null)
                {
                    var newCollection = new FixupCollection<StaffOrganisation>();
                    newCollection.CollectionChanged += FixupStaffOrganisation;
                    _staffOrganisation = newCollection;
                }
                return _staffOrganisation;
            }
            set
            {
                if (!ReferenceEquals(_staffOrganisation, value))
                {
                    var previousValue = _staffOrganisation as FixupCollection<StaffOrganisation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStaffOrganisation;
                    }
                    _staffOrganisation = value;
                    var newValue = value as FixupCollection<StaffOrganisation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStaffOrganisation;
                    }
                }
            }
        }
        private ICollection<StaffOrganisation> _staffOrganisation;
    
        public virtual ICollection<Role> Role
        {
            get
            {
                if (_role == null)
                {
                    var newCollection = new FixupCollection<Role>();
                    newCollection.CollectionChanged += FixupRole;
                    _role = newCollection;
                }
                return _role;
            }
            set
            {
                if (!ReferenceEquals(_role, value))
                {
                    var previousValue = _role as FixupCollection<Role>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRole;
                    }
                    _role = value;
                    var newValue = value as FixupCollection<Role>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRole;
                    }
                }
            }
        }
        private ICollection<Role> _role;
    
        public virtual Organisation Organisation
        {
            get { return _organisation; }
            set
            {
                if (!ReferenceEquals(_organisation, value))
                {
                    var previousValue = _organisation;
                    _organisation = value;
                    FixupOrganisation(previousValue);
                }
            }
        }
        private Organisation _organisation;

        #endregion
        #region Association Fixup
    
        private void FixupOrganisation(Organisation previousValue)
        {
            if (previousValue != null && previousValue.Application.Contains(this))
            {
                previousValue.Application.Remove(this);
            }
    
            if (Organisation != null)
            {
                if (!Organisation.Application.Contains(this))
                {
                    Organisation.Application.Add(this);
                }
                if (SecurityLabel != Organisation.Code)
                {
                    SecurityLabel = Organisation.Code;
                }
            }
        }
    
        private void FixupApplicationAttribute(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ApplicationAttribute item in e.NewItems)
                {
                    item.Application = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ApplicationAttribute item in e.OldItems)
                {
                    if (ReferenceEquals(item.Application, this))
                    {
                        item.Application = null;
                    }
                }
            }
        }
    
        private void FixupApplicationOrganisationTypeGroup(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ApplicationOrganisationTypeGroup item in e.NewItems)
                {
                    item.Application = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ApplicationOrganisationTypeGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.Application, this))
                    {
                        item.Application = null;
                    }
                }
            }
        }
    
        private void FixupStaffAttributes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StaffAttributes item in e.NewItems)
                {
                    item.Application = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StaffAttributes item in e.OldItems)
                {
                    if (ReferenceEquals(item.Application, this))
                    {
                        item.Application = null;
                    }
                }
            }
        }
    
        private void FixupStaffOrganisation(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StaffOrganisation item in e.NewItems)
                {
                    item.Application = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StaffOrganisation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Application, this))
                    {
                        item.Application = null;
                    }
                }
            }
        }
    
        private void FixupRole(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Role item in e.NewItems)
                {
                    item.Application = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Role item in e.OldItems)
                {
                    if (ReferenceEquals(item.Application, this))
                    {
                        item.Application = null;
                    }
                }
            }
        }

        #endregion
    }
}
