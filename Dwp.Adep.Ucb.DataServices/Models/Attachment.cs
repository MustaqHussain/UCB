//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace Dwp.Adep.Ucb.DataServices.Models
{
    public partial class Attachment : IAuditable
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
    
        public virtual System.Guid IncidentCode
        {
            get { return _incidentCode; }
            set
            {
                if (_incidentCode != value)
                {
                    if (Incident != null && Incident.Code != value)
                    {
                        Incident = null;
                    }
                    _incidentCode = value;
                }
            }
        }
        private System.Guid _incidentCode;
    
        public virtual string AttachmentType
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual System.DateTime LoadedDate
        {
            get;
            set;
        }
    
        public virtual string LoadedBy
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<AttachmentData> AttachmentData
        {
            get
            {
                if (_attachmentData == null)
                {
                    var newCollection = new FixupCollection<AttachmentData>();
                    newCollection.CollectionChanged += FixupAttachmentData;
                    _attachmentData = newCollection;
                }
                return _attachmentData;
            }
            set
            {
                if (!ReferenceEquals(_attachmentData, value))
                {
                    var previousValue = _attachmentData as FixupCollection<AttachmentData>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAttachmentData;
                    }
                    _attachmentData = value;
                    var newValue = value as FixupCollection<AttachmentData>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAttachmentData;
                    }
                }
            }
        }
        private ICollection<AttachmentData> _attachmentData;
    
        public virtual Incident Incident
        {
            get { return _incident; }
            set
            {
                if (!ReferenceEquals(_incident, value))
                {
                    var previousValue = _incident;
                    _incident = value;
                    FixupIncident(previousValue);
                }
            }
        }
        private Incident _incident;

        #endregion
        #region Association Fixup
    
        private void FixupIncident(Incident previousValue)
        {
            if (previousValue != null && previousValue.Attachment.Contains(this))
            {
                previousValue.Attachment.Remove(this);
            }
    
            if (Incident != null)
            {
                if (!Incident.Attachment.Contains(this))
                {
                    Incident.Attachment.Add(this);
                }
                if (IncidentCode != Incident.Code)
                {
                    IncidentCode = Incident.Code;
                }
            }
        }
    
        private void FixupAttachmentData(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AttachmentData item in e.NewItems)
                {
                    item.Attachment = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AttachmentData item in e.OldItems)
                {
                    if (ReferenceEquals(item.Attachment, this))
                    {
                        item.Attachment = null;
                    }
                }
            }
        }

        #endregion
    }
}
