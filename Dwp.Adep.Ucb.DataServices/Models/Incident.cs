//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace Dwp.Adep.Ucb.DataServices.Models
{
    public partial class Incident : IAuditable
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get { return _code; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_code != value)
                    {
                        if (Incident2 != null && Incident2.Code != value)
                        {
                            Incident2 = null;
                        }
                        _code = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _code;
    
        public virtual int IncidentID
        {
            get;
            set;
        }
    
        public virtual string Type
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> ReferrerCode
        {
            get { return _referrerCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_referrerCode != value)
                    {
                        if (Referrer != null && Referrer.Code != value)
                        {
                            Referrer = null;
                        }
                        _referrerCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _referrerCode;
    
        public virtual string IncidentStatus
        {
            get;
            set;
        }
    
        public virtual string StaffMemberTitle
        {
            get;
            set;
        }
    
        public virtual string StaffMemberOtherTitle
        {
            get;
            set;
        }
    
        public virtual string StaffMemberFirstName
        {
            get;
            set;
        }
    
        public virtual string StaffMemberLastName
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> JobRoleCode
        {
            get { return _jobRoleCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_jobRoleCode != value)
                    {
                        if (JobRole != null && JobRole.Code != value)
                        {
                            JobRole = null;
                        }
                        _jobRoleCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _jobRoleCode;
    
        public virtual System.Guid StaffMemberHomeOfficeSiteCode
        {
            get { return _staffMemberHomeOfficeSiteCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_staffMemberHomeOfficeSiteCode != value)
                    {
                        if (Site1 != null && Site1.Code != value)
                        {
                            Site1 = null;
                        }
                        _staffMemberHomeOfficeSiteCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _staffMemberHomeOfficeSiteCode;
    
        public virtual string IsStaffHadAppropriateTraining
        {
            get;
            set;
        }
    
        public virtual Nullable<int> StaffMemberYearsInCurrentPost
        {
            get;
            set;
        }
    
        public virtual Nullable<int> StaffMemberMonthsInCurrentRole
        {
            get;
            set;
        }
    
        public virtual string ManagerFirstName
        {
            get;
            set;
        }
    
        public virtual string ManagerLastName
        {
            get;
            set;
        }
    
        public virtual System.DateTime IncidentDate
        {
            get;
            set;
        }
    
        public virtual int FiscalYear
        {
            get;
            set;
        }
    
        public virtual int FiscalQuarter
        {
            get;
            set;
        }
    
        public virtual int FiscalMonth
        {
            get;
            set;
        }
    
        public virtual string FiscalMonthAsText
        {
            get;
            set;
        }
    
        public virtual string IncidentTime
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> CustomerCode
        {
            get { return _customerCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_customerCode != value)
                    {
                        if (Customer != null && Customer.Code != value)
                        {
                            Customer = null;
                        }
                        _customerCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _customerCode;
    
        public virtual bool IsOthersPresent
        {
            get;
            set;
        }
    
        public virtual string OthersPresent
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> EventLeadingToIncidentCode
        {
            get { return _eventLeadingToIncidentCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_eventLeadingToIncidentCode != value)
                    {
                        if (EventLeadingToIncident != null && EventLeadingToIncident.Code != value)
                        {
                            EventLeadingToIncident = null;
                        }
                        _eventLeadingToIncidentCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _eventLeadingToIncidentCode;
    
        public virtual Nullable<System.Guid> IncidentLocationCode
        {
            get { return _incidentLocationCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_incidentLocationCode != value)
                    {
                        if (IncidentLocation != null && IncidentLocation.Code != value)
                        {
                            IncidentLocation = null;
                        }
                        _incidentLocationCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _incidentLocationCode;
    
        public virtual System.Guid IncidentCategoryCode
        {
            get { return _incidentCategoryCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_incidentCategoryCode != value)
                    {
                        if (IncidentCategory != null && IncidentCategory.Code != value)
                        {
                            IncidentCategory = null;
                        }
                        _incidentCategoryCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _incidentCategoryCode;
    
        public virtual Nullable<System.Guid> IncidentTypeCode
        {
            get { return _incidentTypeCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_incidentTypeCode != value)
                    {
                        if (IncidentType != null && IncidentType.Code != value)
                        {
                            IncidentType = null;
                        }
                        _incidentTypeCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _incidentTypeCode;
    
        public virtual Nullable<System.Guid> IncidentDetailsCode
        {
            get { return _incidentDetailsCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_incidentDetailsCode != value)
                    {
                        if (IncidentDetail != null && IncidentDetail.Code != value)
                        {
                            IncidentDetail = null;
                        }
                        _incidentDetailsCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _incidentDetailsCode;
    
        public virtual Nullable<System.Guid> AbuseTypeCode
        {
            get { return _abuseTypeCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_abuseTypeCode != value)
                    {
                        if (AbuseType != null && AbuseType.Code != value)
                        {
                            AbuseType = null;
                        }
                        _abuseTypeCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _abuseTypeCode;
    
        public virtual Nullable<System.Guid> IncidentNarrativeCode
        {
            get { return _incidentNarrativeCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_incidentNarrativeCode != value)
                    {
                        if (Narrative2 != null && Narrative2.Code != value)
                        {
                            Narrative2 = null;
                        }
                        _incidentNarrativeCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _incidentNarrativeCode;
    
        public virtual Nullable<bool> IsLineManageFastTrack
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsLineManagerRIDDOR
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsPoliceCalled
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> HasLineManagerReadReport
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> LineManagerNarrativeCode
        {
            get { return _lineManagerNarrativeCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_lineManagerNarrativeCode != value)
                    {
                        if (Narrative3 != null && Narrative3.Code != value)
                        {
                            Narrative3 = null;
                        }
                        _lineManagerNarrativeCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _lineManagerNarrativeCode;
    
        public virtual Nullable<bool> IsNominatedFastTrack
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsNominatedRIDDOR
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsOralWarning
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> OralWarningDate
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsWrittenWarning
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> WrittenWarningDate
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsAssailantInterviewed
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> AssailantInterviewedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsSolicitorLetter
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> SolicitorLetterDate
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsBanningOrder
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> BanningOrderRequestedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> FurtherInfoNarrativeCode
        {
            get { return _furtherInfoNarrativeCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_furtherInfoNarrativeCode != value)
                    {
                        if (Narrative1 != null && Narrative1.Code != value)
                        {
                            Narrative1 = null;
                        }
                        _furtherInfoNarrativeCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _furtherInfoNarrativeCode;
    
        public virtual Nullable<bool> IsDeficienciesInProcess
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsImplementControlMeasures
        {
            get;
            set;
        }
    
        public virtual string NamedOfficer
        {
            get;
            set;
        }
    
        public virtual string TelephoneContactNumber
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsITMarkersSet
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsPapersMarked
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsNotifiedParties
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> ReviewDate
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsPreviousEvidenceReviewed
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsPreviousPartiesNotified
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsRepeatBehaviour
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsControlMeasuresStillApply
        {
            get;
            set;
        }
    
        public virtual System.Guid SiteCode
        {
            get { return _siteCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_siteCode != value)
                    {
                        if (Site != null && Site.Code != value)
                        {
                            Site = null;
                        }
                        _siteCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _siteCode;
    
        public virtual Nullable<int> NumberOfRecords
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> DeficienciesNarrativeCode
        {
            get { return _deficienciesNarrativeCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_deficienciesNarrativeCode != value)
                    {
                        if (Narrative != null && Narrative.Code != value)
                        {
                            Narrative = null;
                        }
                        _deficienciesNarrativeCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _deficienciesNarrativeCode;
    
        public virtual string OtherIncidentLocation
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> CurrentOwnerStaffCode
        {
            get { return _currentOwnerStaffCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_currentOwnerStaffCode != value)
                    {
                        if (Staff != null && Staff.Code != value)
                        {
                            Staff = null;
                        }
                        _currentOwnerStaffCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _currentOwnerStaffCode;
    
        public virtual string ManagerTelephoneContactNumber
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> ReviewActionNarrativeCode
        {
            get { return _reviewActionNarrativeCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_reviewActionNarrativeCode != value)
                    {
                        if (Narrative4 != null && Narrative4.Code != value)
                        {
                            Narrative4 = null;
                        }
                        _reviewActionNarrativeCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _reviewActionNarrativeCode;
    
        public virtual string BannedFromOffices
        {
            get;
            set;
        }
    
        public virtual string BannedFromOfficesEndDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual AbuseType AbuseType
        {
            get { return _abuseType; }
            set
            {
                if (!ReferenceEquals(_abuseType, value))
                {
                    var previousValue = _abuseType;
                    _abuseType = value;
                    FixupAbuseType(previousValue);
                }
            }
        }
        private AbuseType _abuseType;
    
        public virtual ICollection<Attachment> Attachment
        {
            get
            {
                if (_attachment == null)
                {
                    var newCollection = new FixupCollection<Attachment>();
                    newCollection.CollectionChanged += FixupAttachment;
                    _attachment = newCollection;
                }
                return _attachment;
            }
            set
            {
                if (!ReferenceEquals(_attachment, value))
                {
                    var previousValue = _attachment as FixupCollection<Attachment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAttachment;
                    }
                    _attachment = value;
                    var newValue = value as FixupCollection<Attachment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAttachment;
                    }
                }
            }
        }
        private ICollection<Attachment> _attachment;
    
        public virtual Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                }
            }
        }
        private Customer _customer;
    
        public virtual EventLeadingToIncident EventLeadingToIncident
        {
            get { return _eventLeadingToIncident; }
            set
            {
                if (!ReferenceEquals(_eventLeadingToIncident, value))
                {
                    var previousValue = _eventLeadingToIncident;
                    _eventLeadingToIncident = value;
                    FixupEventLeadingToIncident(previousValue);
                }
            }
        }
        private EventLeadingToIncident _eventLeadingToIncident;
    
        public virtual Narrative Narrative
        {
            get { return _narrative; }
            set
            {
                if (!ReferenceEquals(_narrative, value))
                {
                    var previousValue = _narrative;
                    _narrative = value;
                    FixupNarrative(previousValue);
                }
            }
        }
        private Narrative _narrative;
    
        public virtual Narrative Narrative1
        {
            get { return _narrative1; }
            set
            {
                if (!ReferenceEquals(_narrative1, value))
                {
                    var previousValue = _narrative1;
                    _narrative1 = value;
                    FixupNarrative1(previousValue);
                }
            }
        }
        private Narrative _narrative1;
    
        public virtual Incident Incident1
        {
            get { return _incident1; }
            set
            {
                if (!ReferenceEquals(_incident1, value))
                {
                    var previousValue = _incident1;
                    _incident1 = value;
                    FixupIncident1(previousValue);
                }
            }
        }
        private Incident _incident1;
    
        public virtual Incident Incident2
        {
            get { return _incident2; }
            set
            {
                if (!ReferenceEquals(_incident2, value))
                {
                    var previousValue = _incident2;
                    _incident2 = value;
                    FixupIncident2(previousValue);
                }
            }
        }
        private Incident _incident2;
    
        public virtual IncidentCategory IncidentCategory
        {
            get { return _incidentCategory; }
            set
            {
                if (!ReferenceEquals(_incidentCategory, value))
                {
                    var previousValue = _incidentCategory;
                    _incidentCategory = value;
                    FixupIncidentCategory(previousValue);
                }
            }
        }
        private IncidentCategory _incidentCategory;
    
        public virtual IncidentDetail IncidentDetail
        {
            get { return _incidentDetail; }
            set
            {
                if (!ReferenceEquals(_incidentDetail, value))
                {
                    var previousValue = _incidentDetail;
                    _incidentDetail = value;
                    FixupIncidentDetail(previousValue);
                }
            }
        }
        private IncidentDetail _incidentDetail;
    
        public virtual IncidentLocation IncidentLocation
        {
            get { return _incidentLocation; }
            set
            {
                if (!ReferenceEquals(_incidentLocation, value))
                {
                    var previousValue = _incidentLocation;
                    _incidentLocation = value;
                    FixupIncidentLocation(previousValue);
                }
            }
        }
        private IncidentLocation _incidentLocation;
    
        public virtual Narrative Narrative2
        {
            get { return _narrative2; }
            set
            {
                if (!ReferenceEquals(_narrative2, value))
                {
                    var previousValue = _narrative2;
                    _narrative2 = value;
                    FixupNarrative2(previousValue);
                }
            }
        }
        private Narrative _narrative2;
    
        public virtual IncidentType IncidentType
        {
            get { return _incidentType; }
            set
            {
                if (!ReferenceEquals(_incidentType, value))
                {
                    var previousValue = _incidentType;
                    _incidentType = value;
                    FixupIncidentType(previousValue);
                }
            }
        }
        private IncidentType _incidentType;
    
        public virtual JobRole JobRole
        {
            get { return _jobRole; }
            set
            {
                if (!ReferenceEquals(_jobRole, value))
                {
                    var previousValue = _jobRole;
                    _jobRole = value;
                    FixupJobRole(previousValue);
                }
            }
        }
        private JobRole _jobRole;
    
        public virtual Narrative Narrative3
        {
            get { return _narrative3; }
            set
            {
                if (!ReferenceEquals(_narrative3, value))
                {
                    var previousValue = _narrative3;
                    _narrative3 = value;
                    FixupNarrative3(previousValue);
                }
            }
        }
        private Narrative _narrative3;
    
        public virtual Referrer Referrer
        {
            get { return _referrer; }
            set
            {
                if (!ReferenceEquals(_referrer, value))
                {
                    var previousValue = _referrer;
                    _referrer = value;
                    FixupReferrer(previousValue);
                }
            }
        }
        private Referrer _referrer;
    
        public virtual Narrative Narrative4
        {
            get { return _narrative4; }
            set
            {
                if (!ReferenceEquals(_narrative4, value))
                {
                    var previousValue = _narrative4;
                    _narrative4 = value;
                    FixupNarrative4(previousValue);
                }
            }
        }
        private Narrative _narrative4;
    
        public virtual Site Site
        {
            get { return _site; }
            set
            {
                if (!ReferenceEquals(_site, value))
                {
                    var previousValue = _site;
                    _site = value;
                    FixupSite(previousValue);
                }
            }
        }
        private Site _site;
    
        public virtual Site Site1
        {
            get { return _site1; }
            set
            {
                if (!ReferenceEquals(_site1, value))
                {
                    var previousValue = _site1;
                    _site1 = value;
                    FixupSite1(previousValue);
                }
            }
        }
        private Site _site1;
    
        public virtual Staff Staff
        {
            get { return _staff; }
            set
            {
                if (!ReferenceEquals(_staff, value))
                {
                    var previousValue = _staff;
                    _staff = value;
                    FixupStaff(previousValue);
                }
            }
        }
        private Staff _staff;
    
        public virtual ICollection<IncidentInterestedParty> IncidentInterestedParty
        {
            get
            {
                if (_incidentInterestedParty == null)
                {
                    var newCollection = new FixupCollection<IncidentInterestedParty>();
                    newCollection.CollectionChanged += FixupIncidentInterestedParty;
                    _incidentInterestedParty = newCollection;
                }
                return _incidentInterestedParty;
            }
            set
            {
                if (!ReferenceEquals(_incidentInterestedParty, value))
                {
                    var previousValue = _incidentInterestedParty as FixupCollection<IncidentInterestedParty>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIncidentInterestedParty;
                    }
                    _incidentInterestedParty = value;
                    var newValue = value as FixupCollection<IncidentInterestedParty>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIncidentInterestedParty;
                    }
                }
            }
        }
        private ICollection<IncidentInterestedParty> _incidentInterestedParty;
    
        public virtual ICollection<IncidentLink> IncidentLink
        {
            get
            {
                if (_incidentLink == null)
                {
                    var newCollection = new FixupCollection<IncidentLink>();
                    newCollection.CollectionChanged += FixupIncidentLink;
                    _incidentLink = newCollection;
                }
                return _incidentLink;
            }
            set
            {
                if (!ReferenceEquals(_incidentLink, value))
                {
                    var previousValue = _incidentLink as FixupCollection<IncidentLink>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIncidentLink;
                    }
                    _incidentLink = value;
                    var newValue = value as FixupCollection<IncidentLink>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIncidentLink;
                    }
                }
            }
        }
        private ICollection<IncidentLink> _incidentLink;
    
        public virtual ICollection<IncidentLink> IncidentLink1
        {
            get
            {
                if (_incidentLink1 == null)
                {
                    var newCollection = new FixupCollection<IncidentLink>();
                    newCollection.CollectionChanged += FixupIncidentLink1;
                    _incidentLink1 = newCollection;
                }
                return _incidentLink1;
            }
            set
            {
                if (!ReferenceEquals(_incidentLink1, value))
                {
                    var previousValue = _incidentLink1 as FixupCollection<IncidentLink>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIncidentLink1;
                    }
                    _incidentLink1 = value;
                    var newValue = value as FixupCollection<IncidentLink>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIncidentLink1;
                    }
                }
            }
        }
        private ICollection<IncidentLink> _incidentLink1;
    
        public virtual ICollection<IncidentSystemMarked> IncidentSystemMarked
        {
            get
            {
                if (_incidentSystemMarked == null)
                {
                    var newCollection = new FixupCollection<IncidentSystemMarked>();
                    newCollection.CollectionChanged += FixupIncidentSystemMarked;
                    _incidentSystemMarked = newCollection;
                }
                return _incidentSystemMarked;
            }
            set
            {
                if (!ReferenceEquals(_incidentSystemMarked, value))
                {
                    var previousValue = _incidentSystemMarked as FixupCollection<IncidentSystemMarked>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIncidentSystemMarked;
                    }
                    _incidentSystemMarked = value;
                    var newValue = value as FixupCollection<IncidentSystemMarked>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIncidentSystemMarked;
                    }
                }
            }
        }
        private ICollection<IncidentSystemMarked> _incidentSystemMarked;
    
        public virtual ICollection<IncidentUpdateEvent> IncidentUpdateEvent
        {
            get
            {
                if (_incidentUpdateEvent == null)
                {
                    var newCollection = new FixupCollection<IncidentUpdateEvent>();
                    newCollection.CollectionChanged += FixupIncidentUpdateEvent;
                    _incidentUpdateEvent = newCollection;
                }
                return _incidentUpdateEvent;
            }
            set
            {
                if (!ReferenceEquals(_incidentUpdateEvent, value))
                {
                    var previousValue = _incidentUpdateEvent as FixupCollection<IncidentUpdateEvent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIncidentUpdateEvent;
                    }
                    _incidentUpdateEvent = value;
                    var newValue = value as FixupCollection<IncidentUpdateEvent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIncidentUpdateEvent;
                    }
                }
            }
        }
        private ICollection<IncidentUpdateEvent> _incidentUpdateEvent;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupAbuseType(AbuseType previousValue)
        {
            if (previousValue != null && previousValue.Incident.Contains(this))
            {
                previousValue.Incident.Remove(this);
            }
    
            if (AbuseType != null)
            {
                if (!AbuseType.Incident.Contains(this))
                {
                    AbuseType.Incident.Add(this);
                }
                if (AbuseTypeCode != AbuseType.Code)
                {
                    AbuseTypeCode = AbuseType.Code;
                }
            }
            else if (!_settingFK)
            {
                AbuseTypeCode = null;
            }
        }
    
        private void FixupCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.Incident.Contains(this))
            {
                previousValue.Incident.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.Incident.Contains(this))
                {
                    Customer.Incident.Add(this);
                }
                if (CustomerCode != Customer.Code)
                {
                    CustomerCode = Customer.Code;
                }
            }
            else if (!_settingFK)
            {
                CustomerCode = null;
            }
        }
    
        private void FixupEventLeadingToIncident(EventLeadingToIncident previousValue)
        {
            if (previousValue != null && previousValue.Incident.Contains(this))
            {
                previousValue.Incident.Remove(this);
            }
    
            if (EventLeadingToIncident != null)
            {
                if (!EventLeadingToIncident.Incident.Contains(this))
                {
                    EventLeadingToIncident.Incident.Add(this);
                }
                if (EventLeadingToIncidentCode != EventLeadingToIncident.Code)
                {
                    EventLeadingToIncidentCode = EventLeadingToIncident.Code;
                }
            }
            else if (!_settingFK)
            {
                EventLeadingToIncidentCode = null;
            }
        }
    
        private void FixupNarrative(Narrative previousValue)
        {
            if (previousValue != null && previousValue.Incident.Contains(this))
            {
                previousValue.Incident.Remove(this);
            }
    
            if (Narrative != null)
            {
                if (!Narrative.Incident.Contains(this))
                {
                    Narrative.Incident.Add(this);
                }
                if (DeficienciesNarrativeCode != Narrative.Code)
                {
                    DeficienciesNarrativeCode = Narrative.Code;
                }
            }
            else if (!_settingFK)
            {
                DeficienciesNarrativeCode = null;
            }
        }
    
        private void FixupNarrative1(Narrative previousValue)
        {
            if (previousValue != null && previousValue.Incident1.Contains(this))
            {
                previousValue.Incident1.Remove(this);
            }
    
            if (Narrative1 != null)
            {
                if (!Narrative1.Incident1.Contains(this))
                {
                    Narrative1.Incident1.Add(this);
                }
                if (FurtherInfoNarrativeCode != Narrative1.Code)
                {
                    FurtherInfoNarrativeCode = Narrative1.Code;
                }
            }
            else if (!_settingFK)
            {
                FurtherInfoNarrativeCode = null;
            }
        }
    
        private void FixupIncident1(Incident previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Incident2, this))
            {
                previousValue.Incident2 = null;
            }
    
            if (Incident1 != null)
            {
                Incident1.Incident2 = this;
            }
        }
    
        private void FixupIncident2(Incident previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Incident1, this))
            {
                previousValue.Incident1 = null;
            }
    
            if (Incident2 != null)
            {
                Incident2.Incident1 = this;
                if (Code != Incident2.Code)
                {
                    Code = Incident2.Code;
                }
            }
        }
    
        private void FixupIncidentCategory(IncidentCategory previousValue)
        {
            if (previousValue != null && previousValue.Incident.Contains(this))
            {
                previousValue.Incident.Remove(this);
            }
    
            if (IncidentCategory != null)
            {
                if (!IncidentCategory.Incident.Contains(this))
                {
                    IncidentCategory.Incident.Add(this);
                }
                if (IncidentCategoryCode != IncidentCategory.Code)
                {
                    IncidentCategoryCode = IncidentCategory.Code;
                }
            }
        }
    
        private void FixupIncidentDetail(IncidentDetail previousValue)
        {
            if (previousValue != null && previousValue.Incident.Contains(this))
            {
                previousValue.Incident.Remove(this);
            }
    
            if (IncidentDetail != null)
            {
                if (!IncidentDetail.Incident.Contains(this))
                {
                    IncidentDetail.Incident.Add(this);
                }
                if (IncidentDetailsCode != IncidentDetail.Code)
                {
                    IncidentDetailsCode = IncidentDetail.Code;
                }
            }
            else if (!_settingFK)
            {
                IncidentDetailsCode = null;
            }
        }
    
        private void FixupIncidentLocation(IncidentLocation previousValue)
        {
            if (previousValue != null && previousValue.Incident.Contains(this))
            {
                previousValue.Incident.Remove(this);
            }
    
            if (IncidentLocation != null)
            {
                if (!IncidentLocation.Incident.Contains(this))
                {
                    IncidentLocation.Incident.Add(this);
                }
                if (IncidentLocationCode != IncidentLocation.Code)
                {
                    IncidentLocationCode = IncidentLocation.Code;
                }
            }
            else if (!_settingFK)
            {
                IncidentLocationCode = null;
            }
        }
    
        private void FixupNarrative2(Narrative previousValue)
        {
            if (previousValue != null && previousValue.Incident2.Contains(this))
            {
                previousValue.Incident2.Remove(this);
            }
    
            if (Narrative2 != null)
            {
                if (!Narrative2.Incident2.Contains(this))
                {
                    Narrative2.Incident2.Add(this);
                }
                if (IncidentNarrativeCode != Narrative2.Code)
                {
                    IncidentNarrativeCode = Narrative2.Code;
                }
            }
            else if (!_settingFK)
            {
                IncidentNarrativeCode = null;
            }
        }
    
        private void FixupIncidentType(IncidentType previousValue)
        {
            if (previousValue != null && previousValue.Incident.Contains(this))
            {
                previousValue.Incident.Remove(this);
            }
    
            if (IncidentType != null)
            {
                if (!IncidentType.Incident.Contains(this))
                {
                    IncidentType.Incident.Add(this);
                }
                if (IncidentTypeCode != IncidentType.Code)
                {
                    IncidentTypeCode = IncidentType.Code;
                }
            }
            else if (!_settingFK)
            {
                IncidentTypeCode = null;
            }
        }
    
        private void FixupJobRole(JobRole previousValue)
        {
            if (previousValue != null && previousValue.Incident.Contains(this))
            {
                previousValue.Incident.Remove(this);
            }
    
            if (JobRole != null)
            {
                if (!JobRole.Incident.Contains(this))
                {
                    JobRole.Incident.Add(this);
                }
                if (JobRoleCode != JobRole.Code)
                {
                    JobRoleCode = JobRole.Code;
                }
            }
            else if (!_settingFK)
            {
                JobRoleCode = null;
            }
        }
    
        private void FixupNarrative3(Narrative previousValue)
        {
            if (previousValue != null && previousValue.Incident3.Contains(this))
            {
                previousValue.Incident3.Remove(this);
            }
    
            if (Narrative3 != null)
            {
                if (!Narrative3.Incident3.Contains(this))
                {
                    Narrative3.Incident3.Add(this);
                }
                if (LineManagerNarrativeCode != Narrative3.Code)
                {
                    LineManagerNarrativeCode = Narrative3.Code;
                }
            }
            else if (!_settingFK)
            {
                LineManagerNarrativeCode = null;
            }
        }
    
        private void FixupReferrer(Referrer previousValue)
        {
            if (previousValue != null && previousValue.Incident.Contains(this))
            {
                previousValue.Incident.Remove(this);
            }
    
            if (Referrer != null)
            {
                if (!Referrer.Incident.Contains(this))
                {
                    Referrer.Incident.Add(this);
                }
                if (ReferrerCode != Referrer.Code)
                {
                    ReferrerCode = Referrer.Code;
                }
            }
            else if (!_settingFK)
            {
                ReferrerCode = null;
            }
        }
    
        private void FixupNarrative4(Narrative previousValue)
        {
            if (previousValue != null && previousValue.Incident4.Contains(this))
            {
                previousValue.Incident4.Remove(this);
            }
    
            if (Narrative4 != null)
            {
                if (!Narrative4.Incident4.Contains(this))
                {
                    Narrative4.Incident4.Add(this);
                }
                if (ReviewActionNarrativeCode != Narrative4.Code)
                {
                    ReviewActionNarrativeCode = Narrative4.Code;
                }
            }
            else if (!_settingFK)
            {
                ReviewActionNarrativeCode = null;
            }
        }
    
        private void FixupSite(Site previousValue)
        {
            if (previousValue != null && previousValue.Incident.Contains(this))
            {
                previousValue.Incident.Remove(this);
            }
    
            if (Site != null)
            {
                if (!Site.Incident.Contains(this))
                {
                    Site.Incident.Add(this);
                }
                if (SiteCode != Site.Code)
                {
                    SiteCode = Site.Code;
                }
            }
        }
    
        private void FixupSite1(Site previousValue)
        {
            if (previousValue != null && previousValue.Incident1.Contains(this))
            {
                previousValue.Incident1.Remove(this);
            }
    
            if (Site1 != null)
            {
                if (!Site1.Incident1.Contains(this))
                {
                    Site1.Incident1.Add(this);
                }
                if (StaffMemberHomeOfficeSiteCode != Site1.Code)
                {
                    StaffMemberHomeOfficeSiteCode = Site1.Code;
                }
            }
        }
    
        private void FixupStaff(Staff previousValue)
        {
            if (previousValue != null && previousValue.Incident.Contains(this))
            {
                previousValue.Incident.Remove(this);
            }
    
            if (Staff != null)
            {
                if (!Staff.Incident.Contains(this))
                {
                    Staff.Incident.Add(this);
                }
                if (CurrentOwnerStaffCode != Staff.Code)
                {
                    CurrentOwnerStaffCode = Staff.Code;
                }
            }
            else if (!_settingFK)
            {
                CurrentOwnerStaffCode = null;
            }
        }
    
        private void FixupAttachment(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Attachment item in e.NewItems)
                {
                    item.Incident = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Attachment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Incident, this))
                    {
                        item.Incident = null;
                    }
                }
            }
        }
    
        private void FixupIncidentInterestedParty(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (IncidentInterestedParty item in e.NewItems)
                {
                    item.Incident = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncidentInterestedParty item in e.OldItems)
                {
                    if (ReferenceEquals(item.Incident, this))
                    {
                        item.Incident = null;
                    }
                }
            }
        }
    
        private void FixupIncidentLink(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (IncidentLink item in e.NewItems)
                {
                    item.Incident = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncidentLink item in e.OldItems)
                {
                    if (ReferenceEquals(item.Incident, this))
                    {
                        item.Incident = null;
                    }
                }
            }
        }
    
        private void FixupIncidentLink1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (IncidentLink item in e.NewItems)
                {
                    item.Incident1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncidentLink item in e.OldItems)
                {
                    if (ReferenceEquals(item.Incident1, this))
                    {
                        item.Incident1 = null;
                    }
                }
            }
        }
    
        private void FixupIncidentSystemMarked(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (IncidentSystemMarked item in e.NewItems)
                {
                    item.Incident = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncidentSystemMarked item in e.OldItems)
                {
                    if (ReferenceEquals(item.Incident, this))
                    {
                        item.Incident = null;
                    }
                }
            }
        }
    
        private void FixupIncidentUpdateEvent(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (IncidentUpdateEvent item in e.NewItems)
                {
                    item.Incident = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncidentUpdateEvent item in e.OldItems)
                {
                    if (ReferenceEquals(item.Incident, this))
                    {
                        item.Incident = null;
                    }
                }
            }
        }

        #endregion
    }
}
