//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace Dwp.Adep.Ucb.DataServices.Models
{
    public partial class Organisation : IAuditable, IActiveAware 
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual System.Guid OrganisationTypeCode
        {
            get { return _organisationTypeCode; }
            set
            {
                if (_organisationTypeCode != value)
                {
                    if (OrganisationType != null && OrganisationType.Code != value)
                    {
                        OrganisationType = null;
                    }
                    _organisationTypeCode = value;
                }
            }
        }
        private System.Guid _organisationTypeCode;
    
        public virtual string HEO
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DateDeleted
        {
            get;
            set;
        }
    
        public virtual bool IsActive
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<ADRoleLookup> ADRoleLookup
        {
            get
            {
                if (_aDRoleLookup == null)
                {
                    var newCollection = new FixupCollection<ADRoleLookup>();
                    newCollection.CollectionChanged += FixupADRoleLookup;
                    _aDRoleLookup = newCollection;
                }
                return _aDRoleLookup;
            }
            set
            {
                if (!ReferenceEquals(_aDRoleLookup, value))
                {
                    var previousValue = _aDRoleLookup as FixupCollection<ADRoleLookup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupADRoleLookup;
                    }
                    _aDRoleLookup = value;
                    var newValue = value as FixupCollection<ADRoleLookup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupADRoleLookup;
                    }
                }
            }
        }
        private ICollection<ADRoleLookup> _aDRoleLookup;
    
        public virtual ICollection<Application> Application
        {
            get
            {
                if (_application == null)
                {
                    var newCollection = new FixupCollection<Application>();
                    newCollection.CollectionChanged += FixupApplication;
                    _application = newCollection;
                }
                return _application;
            }
            set
            {
                if (!ReferenceEquals(_application, value))
                {
                    var previousValue = _application as FixupCollection<Application>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupApplication;
                    }
                    _application = value;
                    var newValue = value as FixupCollection<Application>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupApplication;
                    }
                }
            }
        }
        private ICollection<Application> _application;
    
        public virtual ICollection<ApplicationOrganisationTypeGroup> ApplicationOrganisationTypeGroup
        {
            get
            {
                if (_applicationOrganisationTypeGroup == null)
                {
                    var newCollection = new FixupCollection<ApplicationOrganisationTypeGroup>();
                    newCollection.CollectionChanged += FixupApplicationOrganisationTypeGroup;
                    _applicationOrganisationTypeGroup = newCollection;
                }
                return _applicationOrganisationTypeGroup;
            }
            set
            {
                if (!ReferenceEquals(_applicationOrganisationTypeGroup, value))
                {
                    var previousValue = _applicationOrganisationTypeGroup as FixupCollection<ApplicationOrganisationTypeGroup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupApplicationOrganisationTypeGroup;
                    }
                    _applicationOrganisationTypeGroup = value;
                    var newValue = value as FixupCollection<ApplicationOrganisationTypeGroup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupApplicationOrganisationTypeGroup;
                    }
                }
            }
        }
        private ICollection<ApplicationOrganisationTypeGroup> _applicationOrganisationTypeGroup;
    
        public virtual ICollection<Grade> Grade
        {
            get
            {
                if (_grade == null)
                {
                    var newCollection = new FixupCollection<Grade>();
                    newCollection.CollectionChanged += FixupGrade;
                    _grade = newCollection;
                }
                return _grade;
            }
            set
            {
                if (!ReferenceEquals(_grade, value))
                {
                    var previousValue = _grade as FixupCollection<Grade>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGrade;
                    }
                    _grade = value;
                    var newValue = value as FixupCollection<Grade>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGrade;
                    }
                }
            }
        }
        private ICollection<Grade> _grade;
    
        public virtual OrganisationType OrganisationType
        {
            get { return _organisationType; }
            set
            {
                if (!ReferenceEquals(_organisationType, value))
                {
                    var previousValue = _organisationType;
                    _organisationType = value;
                    FixupOrganisationType(previousValue);
                }
            }
        }
        private OrganisationType _organisationType;
    
        public virtual ICollection<OrganisationHierarchy> OrganisationHierarchy
        {
            get
            {
                if (_organisationHierarchy == null)
                {
                    var newCollection = new FixupCollection<OrganisationHierarchy>();
                    newCollection.CollectionChanged += FixupOrganisationHierarchy;
                    _organisationHierarchy = newCollection;
                }
                return _organisationHierarchy;
            }
            set
            {
                if (!ReferenceEquals(_organisationHierarchy, value))
                {
                    var previousValue = _organisationHierarchy as FixupCollection<OrganisationHierarchy>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrganisationHierarchy;
                    }
                    _organisationHierarchy = value;
                    var newValue = value as FixupCollection<OrganisationHierarchy>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrganisationHierarchy;
                    }
                }
            }
        }
        private ICollection<OrganisationHierarchy> _organisationHierarchy;
    
        public virtual ICollection<OrganisationHierarchy> OrganisationHierarchy1
        {
            get
            {
                if (_organisationHierarchy1 == null)
                {
                    var newCollection = new FixupCollection<OrganisationHierarchy>();
                    newCollection.CollectionChanged += FixupOrganisationHierarchy1;
                    _organisationHierarchy1 = newCollection;
                }
                return _organisationHierarchy1;
            }
            set
            {
                if (!ReferenceEquals(_organisationHierarchy1, value))
                {
                    var previousValue = _organisationHierarchy1 as FixupCollection<OrganisationHierarchy>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrganisationHierarchy1;
                    }
                    _organisationHierarchy1 = value;
                    var newValue = value as FixupCollection<OrganisationHierarchy>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrganisationHierarchy1;
                    }
                }
            }
        }
        private ICollection<OrganisationHierarchy> _organisationHierarchy1;
    
        public virtual ICollection<Role> Role
        {
            get
            {
                if (_role == null)
                {
                    var newCollection = new FixupCollection<Role>();
                    newCollection.CollectionChanged += FixupRole;
                    _role = newCollection;
                }
                return _role;
            }
            set
            {
                if (!ReferenceEquals(_role, value))
                {
                    var previousValue = _role as FixupCollection<Role>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRole;
                    }
                    _role = value;
                    var newValue = value as FixupCollection<Role>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRole;
                    }
                }
            }
        }
        private ICollection<Role> _role;
    
        public virtual ICollection<Role> Role1
        {
            get
            {
                if (_role1 == null)
                {
                    var newCollection = new FixupCollection<Role>();
                    newCollection.CollectionChanged += FixupRole1;
                    _role1 = newCollection;
                }
                return _role1;
            }
            set
            {
                if (!ReferenceEquals(_role1, value))
                {
                    var previousValue = _role1 as FixupCollection<Role>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRole1;
                    }
                    _role1 = value;
                    var newValue = value as FixupCollection<Role>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRole1;
                    }
                }
            }
        }
        private ICollection<Role> _role1;
    
        public virtual ICollection<Site> Site
        {
            get
            {
                if (_site == null)
                {
                    var newCollection = new FixupCollection<Site>();
                    newCollection.CollectionChanged += FixupSite;
                    _site = newCollection;
                }
                return _site;
            }
            set
            {
                if (!ReferenceEquals(_site, value))
                {
                    var previousValue = _site as FixupCollection<Site>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSite;
                    }
                    _site = value;
                    var newValue = value as FixupCollection<Site>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSite;
                    }
                }
            }
        }
        private ICollection<Site> _site;
    
        public virtual ICollection<Staff> Staff
        {
            get
            {
                if (_staff == null)
                {
                    var newCollection = new FixupCollection<Staff>();
                    newCollection.CollectionChanged += FixupStaff;
                    _staff = newCollection;
                }
                return _staff;
            }
            set
            {
                if (!ReferenceEquals(_staff, value))
                {
                    var previousValue = _staff as FixupCollection<Staff>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStaff;
                    }
                    _staff = value;
                    var newValue = value as FixupCollection<Staff>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStaff;
                    }
                }
            }
        }
        private ICollection<Staff> _staff;
    
        public virtual ICollection<StaffAttributes> StaffAttributes
        {
            get
            {
                if (_staffAttributes == null)
                {
                    var newCollection = new FixupCollection<StaffAttributes>();
                    newCollection.CollectionChanged += FixupStaffAttributes;
                    _staffAttributes = newCollection;
                }
                return _staffAttributes;
            }
            set
            {
                if (!ReferenceEquals(_staffAttributes, value))
                {
                    var previousValue = _staffAttributes as FixupCollection<StaffAttributes>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStaffAttributes;
                    }
                    _staffAttributes = value;
                    var newValue = value as FixupCollection<StaffAttributes>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStaffAttributes;
                    }
                }
            }
        }
        private ICollection<StaffAttributes> _staffAttributes;
    
        public virtual ICollection<StaffOrganisation> StaffOrganisation
        {
            get
            {
                if (_staffOrganisation == null)
                {
                    var newCollection = new FixupCollection<StaffOrganisation>();
                    newCollection.CollectionChanged += FixupStaffOrganisation;
                    _staffOrganisation = newCollection;
                }
                return _staffOrganisation;
            }
            set
            {
                if (!ReferenceEquals(_staffOrganisation, value))
                {
                    var previousValue = _staffOrganisation as FixupCollection<StaffOrganisation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStaffOrganisation;
                    }
                    _staffOrganisation = value;
                    var newValue = value as FixupCollection<StaffOrganisation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStaffOrganisation;
                    }
                }
            }
        }
        private ICollection<StaffOrganisation> _staffOrganisation;

        #endregion
        #region Association Fixup
    
        private void FixupOrganisationType(OrganisationType previousValue)
        {
            if (previousValue != null && previousValue.Organisation.Contains(this))
            {
                previousValue.Organisation.Remove(this);
            }
    
            if (OrganisationType != null)
            {
                if (!OrganisationType.Organisation.Contains(this))
                {
                    OrganisationType.Organisation.Add(this);
                }
                if (OrganisationTypeCode != OrganisationType.Code)
                {
                    OrganisationTypeCode = OrganisationType.Code;
                }
            }
        }
    
        private void FixupADRoleLookup(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ADRoleLookup item in e.NewItems)
                {
                    item.Organisation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ADRoleLookup item in e.OldItems)
                {
                    if (ReferenceEquals(item.Organisation, this))
                    {
                        item.Organisation = null;
                    }
                }
            }
        }
    
        private void FixupApplication(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Application item in e.NewItems)
                {
                    item.Organisation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Application item in e.OldItems)
                {
                    if (ReferenceEquals(item.Organisation, this))
                    {
                        item.Organisation = null;
                    }
                }
            }
        }
    
        private void FixupApplicationOrganisationTypeGroup(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ApplicationOrganisationTypeGroup item in e.NewItems)
                {
                    item.Organisation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ApplicationOrganisationTypeGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.Organisation, this))
                    {
                        item.Organisation = null;
                    }
                }
            }
        }
    
        private void FixupGrade(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Grade item in e.NewItems)
                {
                    item.Organisation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Grade item in e.OldItems)
                {
                    if (ReferenceEquals(item.Organisation, this))
                    {
                        item.Organisation = null;
                    }
                }
            }
        }
    
        private void FixupOrganisationHierarchy(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OrganisationHierarchy item in e.NewItems)
                {
                    item.Organisation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrganisationHierarchy item in e.OldItems)
                {
                    if (ReferenceEquals(item.Organisation, this))
                    {
                        item.Organisation = null;
                    }
                }
            }
        }
    
        private void FixupOrganisationHierarchy1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OrganisationHierarchy item in e.NewItems)
                {
                    item.Organisation1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrganisationHierarchy item in e.OldItems)
                {
                    if (ReferenceEquals(item.Organisation1, this))
                    {
                        item.Organisation1 = null;
                    }
                }
            }
        }
    
        private void FixupRole(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Role item in e.NewItems)
                {
                    item.Organisation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Role item in e.OldItems)
                {
                    if (ReferenceEquals(item.Organisation, this))
                    {
                        item.Organisation = null;
                    }
                }
            }
        }
    
        private void FixupRole1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Role item in e.NewItems)
                {
                    item.Organisation1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Role item in e.OldItems)
                {
                    if (ReferenceEquals(item.Organisation1, this))
                    {
                        item.Organisation1 = null;
                    }
                }
            }
        }
    
        private void FixupSite(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Site item in e.NewItems)
                {
                    item.Organisation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Site item in e.OldItems)
                {
                    if (ReferenceEquals(item.Organisation, this))
                    {
                        item.Organisation = null;
                    }
                }
            }
        }
    
        private void FixupStaff(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Staff item in e.NewItems)
                {
                    item.Organisation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Staff item in e.OldItems)
                {
                    if (ReferenceEquals(item.Organisation, this))
                    {
                        item.Organisation = null;
                    }
                }
            }
        }
    
        private void FixupStaffAttributes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StaffAttributes item in e.NewItems)
                {
                    item.Organisation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StaffAttributes item in e.OldItems)
                {
                    if (ReferenceEquals(item.Organisation, this))
                    {
                        item.Organisation = null;
                    }
                }
            }
        }
    
        private void FixupStaffOrganisation(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StaffOrganisation item in e.NewItems)
                {
                    item.Organisation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StaffOrganisation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Organisation, this))
                    {
                        item.Organisation = null;
                    }
                }
            }
        }

        #endregion
    }
}
