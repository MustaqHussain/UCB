//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace Dwp.Adep.Ucb.DataServices.Models
{
    public partial class Site : IAuditable, IActiveAware 
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
    
        public virtual System.Guid OrganisationCode
        {
            get { return _organisationCode; }
            set
            {
                if (_organisationCode != value)
                {
                    if (Organisation != null && Organisation.Code != value)
                    {
                        Organisation = null;
                    }
                    _organisationCode = value;
                }
            }
        }
        private System.Guid _organisationCode;
    
        public virtual string SiteName
        {
            get;
            set;
        }
    
        public virtual string PostCode
        {
            get;
            set;
        }
    
        public virtual bool IsActive
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<SiteStaff> SiteStaff
        {
            get
            {
                if (_siteStaff == null)
                {
                    var newCollection = new FixupCollection<SiteStaff>();
                    newCollection.CollectionChanged += FixupSiteStaff;
                    _siteStaff = newCollection;
                }
                return _siteStaff;
            }
            set
            {
                if (!ReferenceEquals(_siteStaff, value))
                {
                    var previousValue = _siteStaff as FixupCollection<SiteStaff>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSiteStaff;
                    }
                    _siteStaff = value;
                    var newValue = value as FixupCollection<SiteStaff>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSiteStaff;
                    }
                }
            }
        }
        private ICollection<SiteStaff> _siteStaff;
    
        public virtual Organisation Organisation
        {
            get { return _organisation; }
            set
            {
                if (!ReferenceEquals(_organisation, value))
                {
                    var previousValue = _organisation;
                    _organisation = value;
                    FixupOrganisation(previousValue);
                }
            }
        }
        private Organisation _organisation;
    
        public virtual ICollection<Incident> Incident
        {
            get
            {
                if (_incident == null)
                {
                    var newCollection = new FixupCollection<Incident>();
                    newCollection.CollectionChanged += FixupIncident;
                    _incident = newCollection;
                }
                return _incident;
            }
            set
            {
                if (!ReferenceEquals(_incident, value))
                {
                    var previousValue = _incident as FixupCollection<Incident>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIncident;
                    }
                    _incident = value;
                    var newValue = value as FixupCollection<Incident>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIncident;
                    }
                }
            }
        }
        private ICollection<Incident> _incident;
    
        public virtual ICollection<Incident> Incident1
        {
            get
            {
                if (_incident1 == null)
                {
                    var newCollection = new FixupCollection<Incident>();
                    newCollection.CollectionChanged += FixupIncident1;
                    _incident1 = newCollection;
                }
                return _incident1;
            }
            set
            {
                if (!ReferenceEquals(_incident1, value))
                {
                    var previousValue = _incident1 as FixupCollection<Incident>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIncident1;
                    }
                    _incident1 = value;
                    var newValue = value as FixupCollection<Incident>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIncident1;
                    }
                }
            }
        }
        private ICollection<Incident> _incident1;

        #endregion
        #region Association Fixup
    
        private void FixupOrganisation(Organisation previousValue)
        {
            if (previousValue != null && previousValue.Site.Contains(this))
            {
                previousValue.Site.Remove(this);
            }
    
            if (Organisation != null)
            {
                if (!Organisation.Site.Contains(this))
                {
                    Organisation.Site.Add(this);
                }
                if (OrganisationCode != Organisation.Code)
                {
                    OrganisationCode = Organisation.Code;
                }
            }
        }
    
        private void FixupSiteStaff(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SiteStaff item in e.NewItems)
                {
                    item.Site = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SiteStaff item in e.OldItems)
                {
                    if (ReferenceEquals(item.Site, this))
                    {
                        item.Site = null;
                    }
                }
            }
        }
    
        private void FixupIncident(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Incident item in e.NewItems)
                {
                    item.Site = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Incident item in e.OldItems)
                {
                    if (ReferenceEquals(item.Site, this))
                    {
                        item.Site = null;
                    }
                }
            }
        }
    
        private void FixupIncident1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Incident item in e.NewItems)
                {
                    item.Site1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Incident item in e.OldItems)
                {
                    if (ReferenceEquals(item.Site1, this))
                    {
                        item.Site1 = null;
                    }
                }
            }
        }

        #endregion
    }
}
