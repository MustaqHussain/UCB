//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace Dwp.Adep.Ucb.DataServices.Models
{
    public partial class ApplicationAttribute : IAuditable, IActiveAware 
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
    
        public virtual System.Guid ApplicationCode
        {
            get { return _applicationCode; }
            set
            {
                if (_applicationCode != value)
                {
                    if (Application != null && Application.Code != value)
                    {
                        Application = null;
                    }
                    _applicationCode = value;
                }
            }
        }
        private System.Guid _applicationCode;
    
        public virtual string AttributeName
        {
            get;
            set;
        }
    
        public virtual string AttributeType
        {
            get;
            set;
        }
    
        public virtual bool IsDataSecurity
        {
            get;
            set;
        }
    
        public virtual bool IsActive
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }
    
        public virtual bool IsRole
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Application Application
        {
            get { return _application; }
            set
            {
                if (!ReferenceEquals(_application, value))
                {
                    var previousValue = _application;
                    _application = value;
                    FixupApplication(previousValue);
                }
            }
        }
        private Application _application;
    
        public virtual ICollection<StaffAttributes> StaffAttributes
        {
            get
            {
                if (_staffAttributes == null)
                {
                    var newCollection = new FixupCollection<StaffAttributes>();
                    newCollection.CollectionChanged += FixupStaffAttributes;
                    _staffAttributes = newCollection;
                }
                return _staffAttributes;
            }
            set
            {
                if (!ReferenceEquals(_staffAttributes, value))
                {
                    var previousValue = _staffAttributes as FixupCollection<StaffAttributes>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStaffAttributes;
                    }
                    _staffAttributes = value;
                    var newValue = value as FixupCollection<StaffAttributes>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStaffAttributes;
                    }
                }
            }
        }
        private ICollection<StaffAttributes> _staffAttributes;

        #endregion
        #region Association Fixup
    
        private void FixupApplication(Application previousValue)
        {
            if (previousValue != null && previousValue.ApplicationAttribute.Contains(this))
            {
                previousValue.ApplicationAttribute.Remove(this);
            }
    
            if (Application != null)
            {
                if (!Application.ApplicationAttribute.Contains(this))
                {
                    Application.ApplicationAttribute.Add(this);
                }
                if (ApplicationCode != Application.Code)
                {
                    ApplicationCode = Application.Code;
                }
            }
        }
    
        private void FixupStaffAttributes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StaffAttributes item in e.NewItems)
                {
                    item.ApplicationAttribute = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StaffAttributes item in e.OldItems)
                {
                    if (ReferenceEquals(item.ApplicationAttribute, this))
                    {
                        item.ApplicationAttribute = null;
                    }
                }
            }
        }

        #endregion
    }
}
