//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace Dwp.Adep.Ucb.DataServices.Models
{
    public partial class Role : IAuditable, IActiveAware 
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
    
        public virtual System.Guid SecurityLabel
        {
            get { return _securityLabel; }
            set
            {
                if (_securityLabel != value)
                {
                    if (Organisation != null && Organisation.Code != value)
                    {
                        Organisation = null;
                    }
                    if (Organisation1 != null && Organisation1.Code != value)
                    {
                        Organisation1 = null;
                    }
                    _securityLabel = value;
                }
            }
        }
        private System.Guid _securityLabel;
    
        public virtual System.Guid ApplicationCode
        {
            get { return _applicationCode; }
            set
            {
                if (_applicationCode != value)
                {
                    if (Application != null && Application.Code != value)
                    {
                        Application = null;
                    }
                    _applicationCode = value;
                }
            }
        }
        private System.Guid _applicationCode;
    
        public virtual string RoleName
        {
            get;
            set;
        }
    
        public virtual bool IsActive
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<ADRoleLookup> ADRoleLookup
        {
            get
            {
                if (_aDRoleLookup == null)
                {
                    var newCollection = new FixupCollection<ADRoleLookup>();
                    newCollection.CollectionChanged += FixupADRoleLookup;
                    _aDRoleLookup = newCollection;
                }
                return _aDRoleLookup;
            }
            set
            {
                if (!ReferenceEquals(_aDRoleLookup, value))
                {
                    var previousValue = _aDRoleLookup as FixupCollection<ADRoleLookup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupADRoleLookup;
                    }
                    _aDRoleLookup = value;
                    var newValue = value as FixupCollection<ADRoleLookup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupADRoleLookup;
                    }
                }
            }
        }
        private ICollection<ADRoleLookup> _aDRoleLookup;
    
        public virtual Application Application
        {
            get { return _application; }
            set
            {
                if (!ReferenceEquals(_application, value))
                {
                    var previousValue = _application;
                    _application = value;
                    FixupApplication(previousValue);
                }
            }
        }
        private Application _application;
    
        public virtual Organisation Organisation
        {
            get { return _organisation; }
            set
            {
                if (!ReferenceEquals(_organisation, value))
                {
                    var previousValue = _organisation;
                    _organisation = value;
                    FixupOrganisation(previousValue);
                }
            }
        }
        private Organisation _organisation;
    
        public virtual Organisation Organisation1
        {
            get { return _organisation1; }
            set
            {
                if (!ReferenceEquals(_organisation1, value))
                {
                    var previousValue = _organisation1;
                    _organisation1 = value;
                    FixupOrganisation1(previousValue);
                }
            }
        }
        private Organisation _organisation1;

        #endregion
        #region Association Fixup
    
        private void FixupApplication(Application previousValue)
        {
            if (previousValue != null && previousValue.Role.Contains(this))
            {
                previousValue.Role.Remove(this);
            }
    
            if (Application != null)
            {
                if (!Application.Role.Contains(this))
                {
                    Application.Role.Add(this);
                }
                if (ApplicationCode != Application.Code)
                {
                    ApplicationCode = Application.Code;
                }
            }
        }
    
        private void FixupOrganisation(Organisation previousValue)
        {
            if (previousValue != null && previousValue.Role.Contains(this))
            {
                previousValue.Role.Remove(this);
            }
    
            if (Organisation != null)
            {
                if (!Organisation.Role.Contains(this))
                {
                    Organisation.Role.Add(this);
                }
                if (SecurityLabel != Organisation.Code)
                {
                    SecurityLabel = Organisation.Code;
                }
            }
        }
    
        private void FixupOrganisation1(Organisation previousValue)
        {
            if (previousValue != null && previousValue.Role1.Contains(this))
            {
                previousValue.Role1.Remove(this);
            }
    
            if (Organisation1 != null)
            {
                if (!Organisation1.Role1.Contains(this))
                {
                    Organisation1.Role1.Add(this);
                }
                if (SecurityLabel != Organisation1.Code)
                {
                    SecurityLabel = Organisation1.Code;
                }
            }
        }
    
        private void FixupADRoleLookup(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ADRoleLookup item in e.NewItems)
                {
                    item.Role = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ADRoleLookup item in e.OldItems)
                {
                    if (ReferenceEquals(item.Role, this))
                    {
                        item.Role = null;
                    }
                }
            }
        }

        #endregion
    }
}
