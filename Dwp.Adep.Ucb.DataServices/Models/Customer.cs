//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace Dwp.Adep.Ucb.DataServices.Models
{
    public partial class Customer : IAuditable
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual string OtherTitle
        {
            get;
            set;
        }
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string OtherNames
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
    
        public virtual string NINO
        {
            get;
            set;
        }
    
        public virtual bool IsCustomerReported
        {
            get;
            set;
        }
    
        public virtual string OtherPersonTitle
        {
            get;
            set;
        }
    
        public virtual string OtherPersonOtherTitle
        {
            get;
            set;
        }
    
        public virtual string OtherPersonFirstName
        {
            get;
            set;
        }
    
        public virtual string OtherPersonOtherNames
        {
            get;
            set;
        }
    
        public virtual string OtherPersonLastName
        {
            get;
            set;
        }
    
        public virtual string OtherPersonNINO
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> RelationshipToCustomerCode
        {
            get { return _relationshipToCustomerCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_relationshipToCustomerCode != value)
                    {
                        if (RelationshipToCustomer != null && RelationshipToCustomer.Code != value)
                        {
                            RelationshipToCustomer = null;
                        }
                        _relationshipToCustomerCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _relationshipToCustomerCode;
    
        public virtual string HouseNumberOrName
        {
            get;
            set;
        }
    
        public virtual string Street
        {
            get;
            set;
        }
    
        public virtual string Town
        {
            get;
            set;
        }
    
        public virtual string County
        {
            get;
            set;
        }
    
        public virtual string PostCode
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<CustomerControlMeasure> CustomerControlMeasure
        {
            get
            {
                if (_customerControlMeasure == null)
                {
                    var newCollection = new FixupCollection<CustomerControlMeasure>();
                    newCollection.CollectionChanged += FixupCustomerControlMeasure;
                    _customerControlMeasure = newCollection;
                }
                return _customerControlMeasure;
            }
            set
            {
                if (!ReferenceEquals(_customerControlMeasure, value))
                {
                    var previousValue = _customerControlMeasure as FixupCollection<CustomerControlMeasure>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerControlMeasure;
                    }
                    _customerControlMeasure = value;
                    var newValue = value as FixupCollection<CustomerControlMeasure>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerControlMeasure;
                    }
                }
            }
        }
        private ICollection<CustomerControlMeasure> _customerControlMeasure;
    
        public virtual ICollection<LinkedCustomer> LinkedCustomer
        {
            get
            {
                if (_linkedCustomer == null)
                {
                    var newCollection = new FixupCollection<LinkedCustomer>();
                    newCollection.CollectionChanged += FixupLinkedCustomer;
                    _linkedCustomer = newCollection;
                }
                return _linkedCustomer;
            }
            set
            {
                if (!ReferenceEquals(_linkedCustomer, value))
                {
                    var previousValue = _linkedCustomer as FixupCollection<LinkedCustomer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLinkedCustomer;
                    }
                    _linkedCustomer = value;
                    var newValue = value as FixupCollection<LinkedCustomer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLinkedCustomer;
                    }
                }
            }
        }
        private ICollection<LinkedCustomer> _linkedCustomer;
    
        public virtual ICollection<LinkedCustomer> LinkedCustomer1
        {
            get
            {
                if (_linkedCustomer1 == null)
                {
                    var newCollection = new FixupCollection<LinkedCustomer>();
                    newCollection.CollectionChanged += FixupLinkedCustomer1;
                    _linkedCustomer1 = newCollection;
                }
                return _linkedCustomer1;
            }
            set
            {
                if (!ReferenceEquals(_linkedCustomer1, value))
                {
                    var previousValue = _linkedCustomer1 as FixupCollection<LinkedCustomer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLinkedCustomer1;
                    }
                    _linkedCustomer1 = value;
                    var newValue = value as FixupCollection<LinkedCustomer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLinkedCustomer1;
                    }
                }
            }
        }
        private ICollection<LinkedCustomer> _linkedCustomer1;
    
        public virtual ICollection<CustomerContingencyArrangement> CustomerContingencyArrangement
        {
            get
            {
                if (_customerContingencyArrangement == null)
                {
                    var newCollection = new FixupCollection<CustomerContingencyArrangement>();
                    newCollection.CollectionChanged += FixupCustomerContingencyArrangement;
                    _customerContingencyArrangement = newCollection;
                }
                return _customerContingencyArrangement;
            }
            set
            {
                if (!ReferenceEquals(_customerContingencyArrangement, value))
                {
                    var previousValue = _customerContingencyArrangement as FixupCollection<CustomerContingencyArrangement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerContingencyArrangement;
                    }
                    _customerContingencyArrangement = value;
                    var newValue = value as FixupCollection<CustomerContingencyArrangement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerContingencyArrangement;
                    }
                }
            }
        }
        private ICollection<CustomerContingencyArrangement> _customerContingencyArrangement;
    
        public virtual RelationshipToCustomer RelationshipToCustomer
        {
            get { return _relationshipToCustomer; }
            set
            {
                if (!ReferenceEquals(_relationshipToCustomer, value))
                {
                    var previousValue = _relationshipToCustomer;
                    _relationshipToCustomer = value;
                    FixupRelationshipToCustomer(previousValue);
                }
            }
        }
        private RelationshipToCustomer _relationshipToCustomer;
    
        public virtual ICollection<Incident> Incident
        {
            get
            {
                if (_incident == null)
                {
                    var newCollection = new FixupCollection<Incident>();
                    newCollection.CollectionChanged += FixupIncident;
                    _incident = newCollection;
                }
                return _incident;
            }
            set
            {
                if (!ReferenceEquals(_incident, value))
                {
                    var previousValue = _incident as FixupCollection<Incident>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIncident;
                    }
                    _incident = value;
                    var newValue = value as FixupCollection<Incident>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIncident;
                    }
                }
            }
        }
        private ICollection<Incident> _incident;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupRelationshipToCustomer(RelationshipToCustomer previousValue)
        {
            if (previousValue != null && previousValue.Customer.Contains(this))
            {
                previousValue.Customer.Remove(this);
            }
    
            if (RelationshipToCustomer != null)
            {
                if (!RelationshipToCustomer.Customer.Contains(this))
                {
                    RelationshipToCustomer.Customer.Add(this);
                }
                if (RelationshipToCustomerCode != RelationshipToCustomer.Code)
                {
                    RelationshipToCustomerCode = RelationshipToCustomer.Code;
                }
            }
            else if (!_settingFK)
            {
                RelationshipToCustomerCode = null;
            }
        }
    
        private void FixupCustomerControlMeasure(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerControlMeasure item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerControlMeasure item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupLinkedCustomer(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LinkedCustomer item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LinkedCustomer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupLinkedCustomer1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LinkedCustomer item in e.NewItems)
                {
                    item.Customer1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LinkedCustomer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer1, this))
                    {
                        item.Customer1 = null;
                    }
                }
            }
        }
    
        private void FixupCustomerContingencyArrangement(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerContingencyArrangement item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerContingencyArrangement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupIncident(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Incident item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Incident item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }

        #endregion
    }
}
