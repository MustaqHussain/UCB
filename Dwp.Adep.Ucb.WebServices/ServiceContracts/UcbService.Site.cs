//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using AutoMapper;
using Dwp.Adep.Ucb.WebServices.DataContracts;
using Dwp.Adep.Ucb.WebServices.Exceptions;
using Dwp.Adep.Ucb.DataServices;
using Dwp.Adep.Ucb.DataServices.Models;
using Dwp.Adep.Ucb.WebServices.ServiceContracts;
using Dwp.Adep.Ucb.WebServices.MessageContracts.Exceptions;
using Dwp.Adep.Ucb.WebServices.Constants;

namespace Dwp.Adep.Ucb.WebServices.ServiceContracts
{

    /// <summary>
    /// Service
    /// Class containing service behaviour for Site
    /// </summary>
    public partial class UcbService
    {
        #region Behaviour for Site

        #region Create

        /// <summary>
        /// Create a Site
        /// </summary>
        /// <param name="currentUser"></param>
        /// <param name="user"></param>
        /// <param name="appID"></param>
        /// <param name="overrideID"></param>
        /// <param name="dc"></param>
        public SiteVMDC CreateSite(string currentUser, string user, string appID, string overrideID, SiteVMDC dc)
        {
            // Create unit of work
            IUnitOfWork uow = new UnitOfWork(currentUser);

            // Create repository
            Repository<Site> dataRepository = new Repository<Site>(uow.ObjectContext, currentUser, user, appID, overrideID);

            // Create SiteStaff repository
            Repository<SiteStaff> siteStaffRepository = new Repository<SiteStaff>(uow.ObjectContext, currentUser, user, appID, overrideID);

            //Create ExceptionManager
            IExceptionManager exceptionManager = new ExceptionManager();

            // Call overload with injected objects
            return CreateSite(currentUser, user, appID, overrideID, dc, dataRepository, siteStaffRepository, uow, exceptionManager);
        }

        /// <summary>
        ///  Create a Site
        /// </summary>
        /// <param name="currentUser"></param>
        /// <param name="user"></param>
        /// <param name="appID"></param>
        /// <param name="overrideID"></param>
        /// <param name="dc"></param>
        /// <param name="dataRepository"></param>
        /// <param name="uow"></param>
        public SiteVMDC CreateSite(string currentUser, string user, string appID, string overrideID, SiteVMDC dc, IRepository<Site> dataRepository,
            IRepository<SiteStaff> siteStaffRepository, IUnitOfWork uow, IExceptionManager exceptionManager)
        {
            try
            {
                #region Parameter validation

                // Validate parameters
                if (string.IsNullOrEmpty(currentUser)) throw new ArgumentOutOfRangeException("currentUser");
                if (string.IsNullOrEmpty(user)) throw new ArgumentOutOfRangeException("user");
                if (string.IsNullOrEmpty(appID)) throw new ArgumentOutOfRangeException("appID");
                if (null == dc) throw new ArgumentOutOfRangeException("dc");
                if (null == dataRepository) throw new ArgumentOutOfRangeException("dataRepository");
                if (null == siteStaffRepository) throw new ArgumentOutOfRangeException("siteStaffRepository");
                if (null == uow) throw new ArgumentOutOfRangeException("uow");

                #endregion

                using (uow)
                {
                    // Create a new ID for the Site item
                    dc.SiteItem.Code = Guid.NewGuid();

                    // Map data contract to model
                    Site siteDestination = Mapper.Map<SiteDC, Site>(dc.SiteItem);

                    // Add the new item
                    dataRepository.Add(siteDestination);

                    SiteStaff siteStaffItem = null;

                    // Add Deputy Nominated Managers
                    foreach (StaffDC staffItem in dc.DeputyNominatedManagerList)
                    {
                        siteStaffItem = new SiteStaff();
                        siteStaffItem.Code = Guid.NewGuid();
                        siteStaffItem.Responsibility = ServiceConstants.SITE_STAFF_RESPONSIBILITY_DEPUTY_NOMINATED_MANAGER;
                        siteStaffItem.SiteCode = siteDestination.Code;
                        siteStaffItem.StaffCode = staffItem.Code;
                        siteStaffRepository.Add(siteStaffItem);
                    }

                    // Add Nominated Manager
                    siteStaffItem = new SiteStaff();
                    siteStaffItem.Code = Guid.NewGuid();
                    siteStaffItem.Responsibility = ServiceConstants.SITE_STAFF_RESPONSIBILITY_NOMINATED_MANAGER;
                    siteStaffItem.SiteCode = siteDestination.Code;
                    siteStaffItem.StaffCode = Guid.Parse(dc.NominatedManagerCode);
                    siteStaffRepository.Add(siteStaffItem);

                    // Commit unit of work
                    uow.Commit();

                    // Map model back to data contract to return new row id.
                    dc.SiteItem = Mapper.Map<Site, SiteDC>(siteDestination);
                }

                return dc;
            }
            catch (Exception e)
            {
                //Prevent exception from propogating across the service interface
                exceptionManager.ShieldException(e);

                return null;
            }
        }

        #endregion

        #region Update

        /// <summary>
        /// Update a Site
        /// </summary>
        /// <param name="currentUser"></param>
        /// <param name="user"></param>
        /// <param name="appID"></param>
        /// <param name="overrideID"></param>
        /// <param name="dc"></param>
        public SiteVMDC UpdateSite(string currentUser, string user, string appID, string overrideID, SiteVMDC dc)
        {
            // Create unit of work
            IUnitOfWork uow = new UnitOfWork(currentUser);

            // Create repository
            IRepository<Site> dataRepository = new Repository<Site>(uow.ObjectContext, currentUser, user, appID, overrideID);

            // Create SiteStaff repository
            Repository<SiteStaff> siteStaffRepository = new Repository<SiteStaff>(uow.ObjectContext, currentUser, user, appID, overrideID);

            //Create ExceptionManager
            IExceptionManager exceptionManager = new ExceptionManager();

            // Call overload with injected objects
            return UpdateSite(currentUser, user, appID, overrideID, dc, dataRepository, siteStaffRepository, uow, exceptionManager);
        }

        /// <summary>
        /// Update a Site
        /// </summary>
        /// <param name="currentUser"></param>
        /// <param name="user"></param>
        /// <param name="appID"></param>
        /// <param name="overrideID"></param>
        /// <param name="dc"></param>
        /// <param name="dataRepository"></param>
        /// <param name="uow"></param>
        public SiteVMDC UpdateSite(string currentUser, string user, string appID, string overrideID, SiteVMDC dc, IRepository<Site> dataRepository,
            Repository<SiteStaff> siteStaffRepository, IUnitOfWork uow, IExceptionManager exceptionManager)
        {
            try
            {
                #region Parameter validation

                // Validate parameters
                if (string.IsNullOrEmpty(currentUser)) throw new ArgumentOutOfRangeException("currentUser");
                if (string.IsNullOrEmpty(user)) throw new ArgumentOutOfRangeException("user");
                if (string.IsNullOrEmpty(appID)) throw new ArgumentOutOfRangeException("appID");
                if (null == dc) throw new ArgumentOutOfRangeException("dc");
                if (null == dataRepository) throw new ArgumentOutOfRangeException("dataRepository");
                if (null == siteStaffRepository) throw new ArgumentOutOfRangeException("siteStaffRepository");
                if (null == uow) throw new ArgumentOutOfRangeException("uow");

                #endregion

                using (uow)
                {
                    // Map data contract to model
                    Site siteDestination = Mapper.Map<SiteDC, Site>(dc.SiteItem);

                    // Add the new item
                    dataRepository.Update(siteDestination);

                    // Find all existing Nomindated Managers and Deputy Nominated Managers
                    IEnumerable<SiteStaff> existingManagers = siteStaffRepository.Find(x => x.SiteCode == siteDestination.Code);

                    // Delete all above managers
                    foreach (SiteStaff manager in existingManagers)
                    {
                        siteStaffRepository.Delete(manager);
                    }

                    SiteStaff siteStaffItem = null;

                    // Add new Deputy Nominated Managers
                    foreach (StaffDC staffItem in dc.DeputyNominatedManagerList)
                    {
                        siteStaffItem = new SiteStaff();
                        siteStaffItem.Code = Guid.NewGuid();
                        siteStaffItem.Responsibility = ServiceConstants.SITE_STAFF_RESPONSIBILITY_DEPUTY_NOMINATED_MANAGER;
                        siteStaffItem.SiteCode = siteDestination.Code;
                        siteStaffItem.StaffCode = staffItem.Code;
                        siteStaffRepository.Add(siteStaffItem);
                    }

                    // Add new Nominated Manager
                    siteStaffItem = new SiteStaff();
                    siteStaffItem.Code = Guid.NewGuid();
                    siteStaffItem.Responsibility = ServiceConstants.SITE_STAFF_RESPONSIBILITY_NOMINATED_MANAGER;
                    siteStaffItem.SiteCode = siteDestination.Code;
                    siteStaffItem.StaffCode = Guid.Parse(dc.NominatedManagerCode);
                    siteStaffRepository.Add(siteStaffItem);

                    // Commit unit of work
                    uow.Commit();

                    // Map model back to data contract to return new row id.
                    dc.SiteItem = Mapper.Map<Site, SiteDC>(siteDestination);
                }

                return dc;

            }
            catch (Exception e)
            {
                //Prevent exception from propogating across the service interface
                exceptionManager.ShieldException(e);

                return null;
            }
        }

        #endregion

        #region Delete

        /// <summary>
        /// Delete a Site
        /// </summary>
        /// <param name="currentUser"></param>
        /// <param name="user"></param>
        /// <param name="appID"></param>
        /// <param name="overrideID"></param>
        /// <param name="code"></param>
        /// <param name="lockID"></param>
        public void DeleteSite(string currentUser, string user, string appID, string overrideID, string code, string lockID)
        {
            // Create unit of work
            IUnitOfWork uow = new UnitOfWork(currentUser);

            // Create repository
            IRepository<Site> dataRepository = new Repository<Site>(uow.ObjectContext, currentUser, user, appID, overrideID);

            // Create SiteStaff repository
            IRepository<SiteStaff> siteStaffRepository = new Repository<SiteStaff>(uow.ObjectContext, currentUser, user, appID, overrideID);

            //Create ExceptionManager
            IExceptionManager exceptionManager = new ExceptionManager();

            // Call overload with injected objects
            DeleteSite(currentUser, user, appID, overrideID, code, lockID, dataRepository, siteStaffRepository, uow, exceptionManager);
        }

        /// <summary>
        /// Update a Site
        /// </summary>
        /// <param name="currentUser"></param>
        /// <param name="user"></param>
        /// <param name="appID"></param>
        /// <param name="overrideID"></param>
        /// <param name="code"></param>
        /// <param name="lockID"></param>
        /// <param name="dataRepository"></param>
        /// <param name="uow"></param>
        public void DeleteSite(string currentUser, string user, string appID, string overrideID, string code, string lockID,
            IRepository<Site> dataRepository,
            IRepository<SiteStaff> siteStaffRepository,
            IUnitOfWork uow,
            IExceptionManager exceptionManager)
        {
            try
            {
                #region Parameter validation

                // Validate parameters
                if (string.IsNullOrEmpty(currentUser)) throw new ArgumentOutOfRangeException("currentUser");
                if (string.IsNullOrEmpty(user)) throw new ArgumentOutOfRangeException("user");
                if (string.IsNullOrEmpty(appID)) throw new ArgumentOutOfRangeException("appID");
                if (string.IsNullOrEmpty(code)) throw new ArgumentOutOfRangeException("code");
                if (string.IsNullOrEmpty(lockID)) throw new ArgumentOutOfRangeException("lockID");
                if (null == dataRepository) throw new ArgumentOutOfRangeException("dataRepository");
                if (null == siteStaffRepository) throw new ArgumentOutOfRangeException("siteStaffRepository");
                if (null == uow) throw new ArgumentOutOfRangeException("uow");

                #endregion

                using (uow)
                {
                    // Convert string to guid
                    Guid codeGuid = Guid.Parse(code);

                    // Find item based on ID
                    Site dataEntity = dataRepository.Single(x => x.Code == codeGuid);

                    // Find all existing Nomindated Managers and Deputy Nominated Managers
                    IEnumerable<SiteStaff> existingManagers = siteStaffRepository.Find(x => x.SiteCode == dataEntity.Code);

                    // Delete all above managers
                    foreach (SiteStaff manager in existingManagers)
                    {
                        siteStaffRepository.Delete(manager);
                    }

                    // Delete the item
                    dataRepository.Delete(dataEntity);

                    // Commit unit of work
                    uow.Commit();
                }
            }
            catch (Exception e)
            {
                //Prevent exception from propogating across the service interface
                exceptionManager.ShieldException(e);
            }
        }

        #endregion

        #region SearchSite

        /// <summary>
        /// Search for Site items
        /// </summary>
        /// <param name="currentUser"></param>
        /// <param name="user"></param>
        /// <param name="appID"></param>
        /// <param name="overrideID"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="includeInActive"></param>
        /// <returns></returns>
        public SiteSearchVMDC SearchSite(string currentUser, string user, string appID, string overrideID, SiteSearchCriteriaDC searchCriteria, int page, int pageSize, bool includeInActive)
        {
            // Create unit of work
            IUnitOfWork uow = new UnitOfWork(currentUser);

            // Create repository
            IRepository<Site> dataRepository = new Repository<Site>(uow.ObjectContext, currentUser, user, appID, overrideID);

            // Create specification for filtering
            ISpecification<Site> specification = new Specification<Site>();

            //Create ExceptionManager
            IExceptionManager exceptionManager = new ExceptionManager();

            // Call overload with injected objects
            return SearchSite(currentUser, user, appID, overrideID, searchCriteria, page, pageSize, includeInActive, specification, dataRepository, uow, exceptionManager);
        }

        /// <summary>
        /// Search for Site items
        /// </summary>
        /// <param name="currentUser"></param>
        /// <param name="user"></param>
        /// <param name="appID"></param>
        /// <param name="overrideID"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="includeInActive"></param>
        /// <param name="specification"></param>
        /// <param name="dataRepository"></param>
        /// <param name="uow"></param>
        /// <returns></returns>
        public SiteSearchVMDC SearchSite(string currentUser, string user, string appID, string overrideID, SiteSearchCriteriaDC searchCriteria, int page, int pageSize, bool includeInActive,
        ISpecification<Site> specification, IRepository<Site> dataRepository, IUnitOfWork uow, IExceptionManager exceptionManager)
        {
            try
            {
                #region Parameter validation

                // Validate parameters
                if (string.IsNullOrEmpty(currentUser)) throw new ArgumentOutOfRangeException("currentUser");
                if (string.IsNullOrEmpty(user)) throw new ArgumentOutOfRangeException("user");
                if (string.IsNullOrEmpty(appID)) throw new ArgumentOutOfRangeException("appID");
                if (null == dataRepository) throw new ArgumentOutOfRangeException("dataRepository");
                if (null == specification) throw new ArgumentOutOfRangeException("specification");
                if (null == uow) throw new ArgumentOutOfRangeException("uow");

                #endregion

                using (uow)
                {
                    // Evaluate search criteria if supplied
                    if (null != searchCriteria)
                    {
                        EvaluateSiteSearchCriteria(searchCriteria, ref specification);
                    }

                    if (!includeInActive)
                    {
                        ISpecification<Site> isActiveSpecification = new Specification<Site>(x => x.IsActive == true);
                        specification = specification.And(isActiveSpecification);
                    }

                    // Set default sort expression
                    System.Linq.Expressions.Expression<Func<Site, Object>> sortExpression = x => x.SiteName;

                    // Find all items that satisfy the specification created above.
                    IEnumerable<Site> dataEntities = dataRepository.Find(specification, sortExpression, page, pageSize);

                    // Get total count of items for search critera
                    int itemCount = dataRepository.Count(specification);

                    SiteSearchVMDC results = new SiteSearchVMDC();

                    // Convert to data contracts
                    List<SiteSearchMatchDC> destinations = Mapper.Map<IEnumerable<Site>, List<SiteSearchMatchDC>>(dataEntities);

                    results.MatchList = destinations;
                    results.SearchCriteria = searchCriteria;
                    results.RecordCount = itemCount;

                    return results;
                }
            }
            catch (Exception e)
            {
                //Prevent exception from propogating across the service interface
                exceptionManager.ShieldException(e);

                return null;
            }
        }

        // Partial method for evaluation of Site search criteria
        partial void EvaluateSiteSearchCriteria(SiteSearchCriteriaDC searchCriteria, ref ISpecification<Site> specification);

        #endregion

        #region GetAllSite
        /// <summary>
        /// 
        /// </summary>
        /// <param name="currentUser"></param>
        /// <param name="user"></param>
        /// <param name="appID"></param>
        /// <param name="overrideID"></param>
        /// <param name="includeInActive"></param>
        /// <returns></returns>
        public List<SiteDC> GetAllSite(string currentUser, string user, string appID, string overrideID, bool includeInActive)
        {
            // Create unit of work
            IUnitOfWork uow = new UnitOfWork(currentUser);

            // Create repository
            Repository<Site> dataRepository = new Repository<Site>(uow.ObjectContext, currentUser, user, appID, overrideID);

            // Create specification for filtering
            ISpecification<Site> specification = new Specification<Site>();

            //Create ExceptionManager
            IExceptionManager exceptionManager = new ExceptionManager();

            // Call overload with injected objects
            return GetAllSite(currentUser, user, appID, overrideID, includeInActive, specification, dataRepository, uow, exceptionManager);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="currentUser"></param>
        /// <param name="user"></param>
        /// <param name="appID"></param>
        /// <param name="overrideID"></param>
        /// <param name="includeInActive"></param>
        /// <param name="specification"></param>
        /// <param name="dataRepository"></param>
        /// <param name="uow"></param>
        /// <returns></returns>
        public List<SiteDC> GetAllSite(string currentUser, string user, string appID, string overrideID, bool includeInActive, ISpecification<Site> specification,
            IRepository<Site> dataRepository, IUnitOfWork uow, IExceptionManager exceptionManager)
        {
            try
            {
                #region Parameter validation

                // Validate parameters
                if (string.IsNullOrEmpty(currentUser)) throw new ArgumentOutOfRangeException("currentUser");
                if (string.IsNullOrEmpty(user)) throw new ArgumentOutOfRangeException("user");
                if (string.IsNullOrEmpty(appID)) throw new ArgumentOutOfRangeException("appID");
                if (null == dataRepository) throw new ArgumentOutOfRangeException("dataRepository");
                if (null == specification) throw new ArgumentOutOfRangeException("specification");
                if (null == uow) throw new ArgumentOutOfRangeException("uow");

                #endregion

                using (uow)
                {
                    // Build specification
                    if (!includeInActive)
                    {
                        ISpecification<Site> isActiveSpecification = new Specification<Site>(x => x.IsActive == true);
                        specification = specification.And(isActiveSpecification);
                    }

                    // Set default sort expression
                    System.Linq.Expressions.Expression<Func<Site, Object>> sortExpression = x => x.SiteName;

                    // Find all items that satisfy the specification created above.
                    IEnumerable<Site> dataEntities = dataRepository.Find(specification, sortExpression);

                    // Convert to data contracts
                    List<SiteDC> destinations = Mapper.Map<IEnumerable<Site>, List<SiteDC>>(dataEntities);

                    return destinations;
                }
            }
            catch (Exception e)
            {
                //Prevent exception from propogating across the service interface
                exceptionManager.ShieldException(e);

                return null;
            }
        }
        #endregion

        #region GetSite

        /// <summary>
        /// Retrieve a Site with associated lookups
        /// </summary>
        /// <param name="currentUser"></param>
        /// <param name="user"></param>
        /// <param name="appID"></param>
        /// <param name="overrideID"></param>
        /// <param name="code"></param>
        /// <returns></returns>
        public SiteVMDC GetSiteByOrganisationCode(string currentUser, string user, string appID, string overrideID, string organisationCode)
        {
            // Create unit of work
            IUnitOfWork uow = new UnitOfWork(currentUser);

            // Create repository
            IRepository<Site> dataRepository = new Repository<Site>(uow.ObjectContext, currentUser, user, appID, overrideID);

            // Create repositories for lookup data
            IRepository<Organisation> organisationRepository = new Repository<Organisation>(uow.ObjectContext, currentUser, user, appID, overrideID);
            IRepository<Staff> staffRepository = new Repository<Staff>(uow.ObjectContext, currentUser, user, appID, overrideID);

            //Create ExceptionManager
            IExceptionManager exceptionManager = new ExceptionManager();

            // Call overload with injected objects
            return GetSiteByOrganisationCode(currentUser, user, appID, overrideID, organisationCode, uow, dataRepository
            , organisationRepository, staffRepository, exceptionManager);
        }

        /// <summary>
        /// Retrieve a Site with associated lookups
        /// </summary>
        /// <param name="currentUser"></param>
        /// <param name="user"></param>
        /// <param name="appID"></param>
        /// <param name="overrideID"></param>
        /// <param name="code"></param>
        /// <param name="dataRepository"></param>
        /// <param name="uow"></param>
        /// <returns></returns>
        public SiteVMDC GetSiteByOrganisationCode(string currentUser, string user, string appID, string overrideID, string organisationCode, IUnitOfWork uow, IRepository<Site> dataRepository
            , IRepository<Organisation> organisationRepository, IRepository<Staff> staffRepository, IExceptionManager exceptionManager)
        {
            try
            {
                #region Parameter validation

                // Validate parameters
                if (string.IsNullOrEmpty(currentUser)) throw new ArgumentOutOfRangeException("currentUser");
                if (string.IsNullOrEmpty(user)) throw new ArgumentOutOfRangeException("user");
                if (string.IsNullOrEmpty(appID)) throw new ArgumentOutOfRangeException("appID");
                if (null == dataRepository) throw new ArgumentOutOfRangeException("dataRepository");
                if (string.IsNullOrEmpty(organisationCode)) throw new ArgumentOutOfRangeException("organisationCode");
                if (null == dataRepository) throw new ArgumentOutOfRangeException("organisationRepository");
                if (null == dataRepository) throw new ArgumentOutOfRangeException("staffRepository");
                if (null == uow) throw new ArgumentOutOfRangeException("uow");

                #endregion

                using (uow)
                {
                    SiteDC destination = null;
                    StaffDC currentNominatedManagerDestination = null;
                    List<StaffDC> currentDeputyNominatedManagersDestination = null;

                    // Convert code to Guid
                    Guid organisationCodeGuid = Guid.Parse(organisationCode);

                    // Retrieve specific Site
                    Site dataEntity = dataRepository.Find(x => x.OrganisationCode == organisationCodeGuid).SingleOrDefault();

                    // See if Site has already been created
                    if (null != dataEntity)
                    {
                        // Convert to data contract for passing through service interface
                        destination = Mapper.Map<Site, SiteDC>(dataEntity);

                        Guid siteCodeGuid = dataEntity.Code;

                        // Get nominated manager for this Site
                        ISpecification<Staff> currentNominatedManagerSpecification = new Specification<Staff>(
                                                                            x => x.SiteStaff.Any(
                                                                                                    y => y.SiteCode == siteCodeGuid && y.Responsibility.ToLower() == 
                                                                                                            ServiceConstants.SITE_STAFF_RESPONSIBILITY_NOMINATED_MANAGER.ToLower()
                                                                                                )
                                                                    );
                        
                        Staff currentNominatedManager = staffRepository.Single(currentNominatedManagerSpecification);
                        currentNominatedManagerDestination = Mapper.Map<StaffDC>(currentNominatedManager);

                        // Get deputy nominated managers for this Site
                        ISpecification<Staff> currentDeputyNominatedManagerSpecification = new Specification<Staff>(
                                                    x => x.SiteStaff.Any(
                                                                                y => y.SiteCode == siteCodeGuid && y.Responsibility.ToLower() ==
                                                                                                    ServiceConstants.SITE_STAFF_RESPONSIBILITY_DEPUTY_NOMINATED_MANAGER.ToLower()
                                                                        )
                                                                    );
                        
                        IEnumerable<Staff> currentDeputyNominatedManagerList = staffRepository.Find(currentDeputyNominatedManagerSpecification);
                        currentDeputyNominatedManagersDestination = Mapper.Map<List<StaffDC>>(currentDeputyNominatedManagerList);
                    }
                    else
                    // If site does not exist then create Site object and provide default Site name same a Organisation name
                    {
                        // Get site organisations
                        ISpecification<Organisation> siteOrgansiationSpecification = new Specification<Organisation>(x => x.Code == organisationCodeGuid);
                        Organisation siteOrganisation = organisationRepository.Single(siteOrgansiationSpecification);

                        destination = new SiteDC();
                        destination.OrganisationCode = siteOrganisation.Code;
                        destination.IsActive = true;

                        // Provide default Site name, same as Organisation Name
                        destination.SiteName = siteOrganisation.Name;
                    }

                    // Create aggregate contract
                    SiteVMDC returnObject = new SiteVMDC();

                    returnObject.SiteItem = destination;

                    // Set Nominated Manager
                    if (null != currentNominatedManagerDestination)
                    {
                        returnObject.NominatedManagerCode = currentNominatedManagerDestination.Code.ToString();
                        returnObject.NominatedManagerSearchList = new List<StaffDC>();
                        returnObject.NominatedManagerSearchList.Add(currentNominatedManagerDestination);
                    }
                    // Set Deputy Nominated Managers
                    returnObject.DeputyNominatedManagerList = currentDeputyNominatedManagersDestination;

                    return returnObject;
                }
            }
            catch (Exception e)
            {
                //Prevent exception from propogating across the service interface
                exceptionManager.ShieldException(e);

                return null;
            }
        }

        #endregion

        #region SearchStaffManager

        public StaffNominatedManagerSearchVMDC SearchStaffNominatedManagers(string currentUser, string user, string appID, string overrideID, StaffNominatedManagerSearchVMDC staffInfo)
        {
            // Create unit of work
            IUnitOfWork uow = new UnitOfWork(currentUser);

            // Create repository
            IRepository<Staff> dataRepository = new Repository<Staff>(uow.ObjectContext, currentUser, user, appID, overrideID);

            //Create ExceptionManager
            IExceptionManager exceptionManager = new ExceptionManager();

            return SearchStaffNominatedManagers(currentUser, user, appID, overrideID, staffInfo, uow, dataRepository, exceptionManager);
        }

        public StaffNominatedManagerSearchVMDC SearchStaffNominatedManagers(string currentUser, string user, string appID, string overrideID, StaffNominatedManagerSearchVMDC staffInfo,
            IUnitOfWork uow, IRepository<Staff> dataRepository, IExceptionManager exceptionManager)
        {
            try
            {
                #region Parameter validation

                // Validate parameters
                if (string.IsNullOrEmpty(currentUser)) throw new ArgumentOutOfRangeException("currentUser");
                if (string.IsNullOrEmpty(user)) throw new ArgumentOutOfRangeException("user");
                if (string.IsNullOrEmpty(appID)) throw new ArgumentOutOfRangeException("appID");
                if (null == staffInfo) throw new ArgumentOutOfRangeException("staffInfo");
                if (null == dataRepository) throw new ArgumentOutOfRangeException("dataRepository");
                if (null == uow) throw new ArgumentOutOfRangeException("uow");

                #endregion

                using (uow)
                {

                    // Search for staff with firstname specified
                    ISpecification<Staff> staffFirstNameSpecification = new Specification<Staff>(x => x.FirstName.ToLower().Contains(staffInfo.FirstName.ToLower()));

                    // Search for staff with lastname specified
                    ISpecification<Staff> staffLastNameSpecification = new Specification<Staff>(x => x.LastName.ToLower().Contains(staffInfo.LastName.ToLower()));

                    // Search for staff who are nominated managers
                    ISpecification<Staff> staffNominatedManagerSpecification = new Specification<Staff>(x => x.StaffAttributes.Any(y => (y.ApplicationAttribute.AttributeName.ToUpper() == "UCB-NOMINATED-MANAGER") && (y.Application.ApplicationName.ToUpper() == "UCB")));

                    // Search for staff who are deputy nominated managers
                    ISpecification<Staff> staffDeputyNominatedManagerSpecification = new Specification<Staff>(x => x.StaffAttributes.Any(y => (y.ApplicationAttribute.AttributeName.ToUpper() == "UCB-DEPUTY-NOMINATED-MANAGER") && (y.Application.ApplicationName.ToUpper() == "UCB")));

                    ISpecification<Staff> staffSearchSpecification = null;

                    if (!string.IsNullOrEmpty(staffInfo.FirstName))
                    {
                        staffSearchSpecification = staffFirstNameSpecification;
                    }

                    if (!string.IsNullOrEmpty(staffInfo.LastName))
                    {
                        staffSearchSpecification = (null == staffSearchSpecification)?staffLastNameSpecification:staffSearchSpecification.And(staffLastNameSpecification);
                    }

                    if (staffInfo.IsNominatedManager)
                    {
                        staffSearchSpecification = (null == staffSearchSpecification) ? staffNominatedManagerSpecification : staffSearchSpecification.And(staffNominatedManagerSpecification);
                    }

                    if (staffInfo.IsDeputyNominatedManager)
                    {
                        staffSearchSpecification = (null == staffSearchSpecification) ? staffDeputyNominatedManagerSpecification : staffSearchSpecification.And(staffDeputyNominatedManagerSpecification);
                    }

                    // Set default sort expression
                    System.Linq.Expressions.Expression<Func<Staff, Object>> sortExpression = x => x.LastName;

                    // Get staff based on search criteria
                    IEnumerable<Staff> staffList = dataRepository.Find(staffSearchSpecification, sortExpression);

                    // Convert to list
                    List<StaffDC> staffListDestination = Mapper.Map<List<StaffDC>>(staffList);

                    staffInfo.MatchList = staffListDestination;

                    // Return staff matching criteria
                    return staffInfo;
                }
            }
            catch (Exception e)
            {
                //Prevent exception from propogating across the service interface
                exceptionManager.ShieldException(e);

                return null;
            }
        }

        #endregion


        #endregion
    }

}
