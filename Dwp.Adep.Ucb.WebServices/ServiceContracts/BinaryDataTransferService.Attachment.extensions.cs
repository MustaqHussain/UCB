//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ----------------------------------------------------------------------
//  Name: IBinaryDataTransferUploadService
// 
//  Description: Implements behaviour for IBinaryDataTransferUploadService interface UploadAttachment method.
// 
//  History:
//  --------
// 
//  19/07/2008 1.00 D. Avid
// ----------------------------------------------------------------------
namespace Dwp.Adep.Ucb.WebServices.ServiceContracts
{
    //using Dwp.Esf.Esf2007.BusinessLogic;
    //using Dwp.Esf.Esf2007.BusinessEntities;
    //using Dwp.Esf.Esf2007.CrossLayer;
    //using Dwp.Esf.Esf2007.CrossLayer.Exceptions;
    //using Dwp.Esf.Esf2007.DataContracts;
   using System;
    using System.Security.Principal;
    using System.Collections.Generic;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.ServiceModel;
    using Dwp.Adep.Ucb.WebServices.ServiceContracts;
    using Dwp.Adep.Ucb.WebServices.DataContracts;
    using Dwp.Adep.Ucb.DataServices;
    using Dwp.Adep.Ucb.DataServices.Models;
    using Dwp.Adep.Ucb.WebServices.Business_Logic;
    using Dwp.Adep.Ucb.WebServices.Exceptions;
    using Dwp.Adep.Ucb.WebServices.MessageContracts.Exceptions;


    /// <summary>
    /// Implements behaviour for IBinaryDataTransferUploadService interface UploadAttachment method.
    /// </summary>
    public sealed partial class BinaryDataTransferService : IBinaryDataTransferService
    {
        
        #region UploadAttachment


        /// <summary>
            /// Create a AbuseType
            /// </summary>
            /// <param name="currentUser"></param>
            /// <param name="user"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dc"></param>
            public UploadAttachmentResponse UploadAttachment(UploadAttachmentRequest request)
            {
    			// Create unit of work
                IUnitOfWork uow = new UnitOfWork(request.UserID);
    	
    			// Create repository
                Repository<Attachment> attachmentRepository = new Repository<Attachment>(uow.ObjectContext,request.UserID,request.UserID,"","");// currentUser, user, appID, overrideID);
                Repository<AttachmentData> attachmentdataRepository = new Repository<AttachmentData>(uow.ObjectContext, request.UserID, request.UserID, "", "");// currentUser, user, appID, overrideID);
                Repository<IncidentUpdateEvent> incidentUpdateEventRepository = new Repository<IncidentUpdateEvent>(uow.ObjectContext, request.UserID, request.UserID, "", "");
                Repository<Staff> staffRepository = new Repository<Staff>(uow.ObjectContext, request.UserID, request.UserID, "", "");

                //Create ExceptionManager
                IExceptionManager exceptionManager = new ExceptionManager();

    			// Call overload with injected objects
                return UploadAttachment(attachmentRepository, attachmentdataRepository, incidentUpdateEventRepository, staffRepository, uow, exceptionManager, request);
            }
    
    		

        /// <summary>
        /// UploadAttachment
        /// </summary>
        /// <param name="request">UploadAttachmentRequest information</param>
            public UploadAttachmentResponse UploadAttachment(IRepository<Attachment> attachmentRepository, IRepository<AttachmentData> attachmentDataRepository, IRepository<IncidentUpdateEvent> incidentUpdateEventRepository, IRepository<Staff> staffRepository, IUnitOfWork uow, 
                IExceptionManager exceptionManager, UploadAttachmentRequest request)
            {

                UploadAttachmentResponse ReturnValue = new UploadAttachmentResponse();
                try
                {
                    #region Parameter validation

                    if (null == request) throw new ArgumentOutOfRangeException("request");
                    if (null == attachmentRepository) throw new ArgumentOutOfRangeException("dataRepository");
                    if (null == uow) throw new ArgumentOutOfRangeException("uow");

                    #endregion
                    using (uow)
                    {

                        // Create response message contract

                        bool HasError = false;

                        // Create empty message list
                        List<string> Messages = new List<string>();

                        var AttachmentData = AutoMapper.Mapper.Map<AttachmentDC, Attachment>(request.Attachment);
                        HasError = AttachmentComponent.UploadAttachment(AttachmentData, request.DocumentBody, attachmentRepository,attachmentDataRepository);
                        //out Messages);
                        //pass back the details of the newly inserted document
                        ReturnValue.Attachment = AutoMapper.Mapper.Map<Attachment, AttachmentDC>(AttachmentData);
                        if (!HasError)
                        {
                            Messages.Add("Added");


                            // Add to Incident history IncidentUpdateEvent
                            Guid userWhoUpdatedIncident = Guid.Parse(request.UserID);

                            string staffName = staffRepository.Find(new Specification<Staff>(x => x.Code == userWhoUpdatedIncident)).Select(x => x.FirstName + " " + x.LastName).First();
                            IncidentUpdateEvent incidentUpdateEventItem = new IncidentUpdateEvent();
                            incidentUpdateEventItem.Code = Guid.NewGuid();
                            incidentUpdateEventItem.DateTime = DateTime.Now;
                            incidentUpdateEventItem.IncidentCode = AttachmentData.IncidentCode;
                            incidentUpdateEventItem.Type = "Update";
                            incidentUpdateEventItem.UpdateBy = staffName;
                            
                            //IncidentUpdateEvent
                            List<IncidentUpdateEvent> incidentUpdateEventList = incidentUpdateEventRepository.Find(new Specification<IncidentUpdateEvent>(x => x.IncidentCode == AttachmentData.IncidentCode && x.Type == "Update")).ToList();
                            incidentUpdateEventList = incidentUpdateEventList.OrderBy(x => x.DateTime).ToList();
                            //Only store last 5 update events (list is ordered by date time (asc) so the elementAt 0 will be the oldest
                            if (incidentUpdateEventList.Count == 5)
                                incidentUpdateEventRepository.Delete(incidentUpdateEventList.ElementAt(0));

                            incidentUpdateEventRepository.Add(incidentUpdateEventItem);
                        }
                        else
                        {
                            Messages.Add("Failed");
                        }
                        //if (IsDuplicate)
                        //{
                        //    Messages.Add(MessageComponent.CreateWarningMessage(ResourceInformation.RES_INFORM_DOCUMENT_DUPLICATE));
                        //}

                        // Convert messages be's to data contracts 
                        ReturnValue.Messages = Messages;

                        // Return success/failure indicator 
                        ReturnValue.Result = HasError;

                        uow.Commit();

                    }

                   
                    return ReturnValue;
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    exceptionManager.ShieldException(e);

                    return null;
                }
            }
        #endregion

        #region DownloadAttachment



            public DownloadAttachmentResponse DownloadAttachment(DownloadAttachmentRequest request)
            {
                // Create unit of work
                IUnitOfWork uow = new UnitOfWork(request.UserID);

                // Create repository
                Repository<Attachment> attachmentRepository = new Repository<Attachment>(uow.ObjectContext, request.UserID, request.UserID, "", "");// currentUser, user, appID, overrideID);
                Repository<AttachmentData> attachmentdataRepository = new Repository<AttachmentData>(uow.ObjectContext, request.UserID, request.UserID, "", "");// currentUser, user, appID, overrideID);

                //Create ExceptionManager
                IExceptionManager exceptionManager = new ExceptionManager();

                // Call overload with injected objects
                return DownloadAttachment(attachmentRepository, attachmentdataRepository, uow, exceptionManager, request);
            }



            /// <summary>
            /// DownloadAgreementDocument
            /// </summary>
            /// <param name="request">DownloadAgreementDocumentRequest information</param>
            public DownloadAttachmentResponse DownloadAttachment(IRepository<Attachment> attachmentRepository, IRepository<AttachmentData> attachmentDataRepository, IUnitOfWork uow, 
                 IExceptionManager exceptionManager, DownloadAttachmentRequest request)
            {
                #region Parameter validation

                if (null == request) throw new ArgumentOutOfRangeException("request");
                if (null == attachmentRepository) throw new ArgumentOutOfRangeException("dataRepository");
                if (null == uow) throw new ArgumentOutOfRangeException("uow");

                #endregion


                DownloadAttachmentResponse ReturnValue = new DownloadAttachmentResponse();
                try
                {
                    #region Parameter validation

                    if (null == request) throw new ArgumentOutOfRangeException("request");
                    if (null == attachmentRepository) throw new ArgumentOutOfRangeException("dataRepository");
                    if (null == uow) throw new ArgumentOutOfRangeException("uow");

                    #endregion
                    using (uow)
                    {

                        bool HasError = false;

                        // Create empty message list
                        List<string> Messages = new List<string>();

                        // Call business method
                        ReturnValue.DocumentBody = AttachmentComponent.DownloadAttachment(request.AttachmentCode, attachmentRepository);
                        //                               out Messages);


                        // Return success/failure indicator 
                        ReturnValue.Result = HasError;
                    }
                }
                catch (Exception e)
                {
                    // If any exceptions occur, convert them to fault contract
                    exceptionManager.ShieldException(e);
                }

                return ReturnValue;
            }
            #endregion

           

    }
    
}
