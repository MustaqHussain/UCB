<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="..\Dwp.Adep.Ucb.DataServices\Models\Global.t4"#><#@
 output extension=".cs"#><#

// List of entities not to generate code for
string ignoreList = globalIgnoreList;

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\Dwp.Adep.Ucb.DataServices\Models\Model1.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();
string namespaceminusonelevelName = namespaceName.Replace("ServiceContracts", string.Empty);

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Write out support code to primary template output file
WriteHeader(fileManager, "Dwp.Adep.Ucb.Mapping", "Dwp.Adep.Ucb.DataServices.Models", "Dwp.Adep.Ucb.WebServices.DataContracts");

fileManager.StartNewFile("TypeMappingConfigurator_EXPERIMENTAL.cs");

BeginNamespace(namespaceName, code);
#>

    public partial class TypeMappingConfigurator
    {
        private static bool _initialised = false;
        private static readonly object _lockObject = new object();

        /// <summary>
        /// Called to ensure type mappings requried by the service are registered with 
        /// the MappingService once and once only (in a thread safe way).
        /// </summary>
		public static void DefineTypeMappings()
        {
			// out check to reduce contention
            if (!_initialised)
            {
			    // apply lock to ensure only a single thread enters
                lock (_lockObject)
                {
                    if (!_initialised)
                    {
                        TypeMappingConfigurator tmc = new TypeMappingConfigurator();
                        tmc.CreateGeneratedMaps();
                        tmc.CreateCustomMaps();
                        _initialised = true;
                    }
                }
            }
        }

        /// <summary>
        /// Optionally implement this method in a ".Extension" file if custom mappings are required.
        /// </summary>
		/// <remarks>
		/// ALTHOUGH PUBLIC THIS METHOD IS NOT INTENDED TO BE CALLED OUTSIDE OF THIS CLASS
		/// </remarks>
        partial void CreateCustomMaps();

		/// <remarks>
		/// ALTHOUGH PUBLIC THIS METHOD IS NOT INTENDED TO BE CALLED OUTSIDE OF THIS CLASS
		/// </remarks>
        public void CreateGeneratedMaps()
        {
			IMappingService mappingService = new MappingService();

			#region Generated Type Mappings
<#
// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	// Do not generate code for entities in the ignore list
	if (ignoreList.Contains("," + entity.Name + ",")) continue;
#>

            mappingService.CreateMap<<#=entity.Name#>, <#=entity.Name#>DC>();
            mappingService.CreateMap<<#=entity.Name#>DC, <#=entity.Name#>>();
			mappingService.CreateMap<<#=entity.Name#>, <#=entity.Name#>SearchMatchDC>();
<#
}
#>
			
			#endregion Generated Type Mappings

	}
}
<#

EndNamespace(namespaceName);

#>

<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

#>